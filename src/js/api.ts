
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApi {
  export const Version = '1.3.2.228';
  export interface ApiTSHandlersCallbacks<T> {
    Then?: (res: T) => void;
    Catch?: (error?: string) => void;
    Finally?: (res?: T) => void;
    BeforeCall?: (request?: XMLHttpRequest) => void;
  }
  export interface KeyValuePair<K, V> {
    Key: K;
    Value: V;
  }
  export type Dict<TValue> = {
    [key: string]: TValue;
  }
  export type DictN<TValue> = {
    [key: number]: TValue;
  }
  export type TFileStreamHeaders = {
    filename?: string;
    size?: number;
  } & Dict<any>;
  export type Guid = string;
  export let timeout: number = 0;
  export let debug: boolean = false;
  export let isServiceLocalTimeZone = false;
  export let serviceTimeZoneOffset = 0; //utc;
  export function getTzOffset(date: Date = new Date()): number {
    return date.getTimezoneOffset() * -1;
  }
  function timeZoneOffsetToStr(offset: number): string {
    const offsetAbs = Math.abs(offset);
    let hours = Math.floor(offsetAbs / 60);
    let minutes = offsetAbs % 60;

    let hs = hours.toString();
    if (hours == 0) {
      hs = '00';
    }
    else if (hours > 0 && hs.length < 2) {
      hs = '0' + hours;
    }
    let mins = minutes.toString();
    if (minutes == 0) {
      mins = '00';
    }
    else if (minutes > 0 && mins.length < 2) {
      mins = '0' + minutes;
    }
    return `${offset >= 0 ? '+' : '-'}${hs}${mins}`;
  }
  export let serviceName: string = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + '/api.svc';
  export const Guid = {
    Empty: '00000000-0000-0000-0000-000000000000',
    Generate(): string {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
      });
    },
  };
  export const Console: { ColorSend: string, ColorResult: string, ColorBG: string } = {
    ColorSend: '#11793E',
    ColorResult: '#000',
    ColorBG: 'antiquewhite'
  };
  export let debugExcludes: Dict<boolean> = {};
  //export debugExcludesEmptyOnly: any false;
  export let ontimeout = function (method: string, e?: ProgressEvent): void {

  };
  export let onerror = function (ev: ProgressEvent | null, method: string, params: object, xhr: XMLHttpRequest): void {

  };
  export let onUnauth = function (method?: string): void {
    console.log('Unauthorized ' + method);
    if ((<any>window)['Luff'] && (<any>window)['Luff'].User)
      localStorage.setItem('LuffRoute' + document.location.href.split('#')[0], document.location.hash);
    window.location.href = 'index.html'
  };
  export let onDeny = function (method: string, params: object): void {
    console.error('[Server] Method Access denied ' + method, params);
    if ((<any>window)['Luff'])
      (<any>window)['Luff'].Pop.Error('[Access denied] Method: `' + method + '` is not allowed');
  };
  let base64: any = (function () { function b(m: any, n: any, o: any, p: any, q: any, r: any) { m += ''; for (var y, t = 0, u = 0, v = m.length, w = '', x = 0; u < v;) { for (y = m.charCodeAt(u), y = 256 > y ? o[y] : -1, t = (t << q) + y, x += q; x >= r;) { x -= r; var z = t >> x; w += p.charAt(z), t ^= z << x } ++u } return !n && 0 < x && (w += p.charAt(t << r - x)), w } for (var k, d = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', e = '', f = [256], g = [256], h = 0, j = { encode: function encode(m: any) { var n = m.replace(/[\u0080-\u07ff]/g, function (o: any) { var p = o.charCodeAt(0); return String.fromCharCode(192 | p >> 6, 128 | 63 & p) }).replace(/[\u0800-\uffff]/g, function (o: any) { var p = o.charCodeAt(0); return String.fromCharCode(224 | p >> 12, 128 | 63 & p >> 6, 128 | 63 & p) }); return n }, decode: function decode(m: any) { var n = m.replace(/[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g, function (o: any) { var p = (15 & o.charCodeAt(0)) << 12 | (63 & o.charCodeAt(1)) << 6 | 63 & o.charCodeAt(2); return String.fromCharCode(p) }).replace(/[\u00c0-\u00df][\u0080-\u00bf]/g, function (o: any) { var p = (31 & o.charCodeAt(0)) << 6 | 63 & o.charCodeAt(1); return String.fromCharCode(p) }); return n } }; 256 > h;)k = String.fromCharCode(h), e += k, g[h] = h, f[h] = d.indexOf(k), ++h; let l: any = function (m: any, n: any, o: any) { return n ? l[m](n, o) : m ? null : this }; return l.btoa = l.encode = function (m: any, n: any) { return m = !1 === l.raw || l.utf8encode || n ? j.encode(m) : m, m = b(m, !1, g, d, 8, 6), m + '===='.slice(m.length % 4 || 4) }, l.atob = l.decode = function (m: any, n: any) { m = (m + '').split('='); var o = m.length; do --o, m[o] = b(m[o], !0, f, e, 6, 8); while (0 < o); return m = m.join(''), !1 === l.raw || l.utf8decode || n ? j.decode(m) : m }, l })();
  function make_base_auth(user: string, password: string): string {
    let tok = user + ':' + password;
    let hash = base64.encode(tok);
    return 'Basic ' + hash;
  }

  //type ConverterFn = (obj: any, converter: DateConverterFn) => any;
  type ConvertFn = (obj: any, convertDirection: ConvertDirection, convertType?: ConverterType, isDictionary?: boolean) => any;
  type ConverterFn = (obj: any, convertDirection: ConvertDirection) => any;
  type DateConverterFn = (date: string | Date) => any;
  const regexDateCs = new RegExp('Date\\((-?[\\d]+)(([+-]\\d+)\\))?');
  export type DateTimeOffset = {
    DateTime: string;       //ex.: '/Date(1624012720495)/',
    OffsetMinutes: number;  //ex.: 180
  }
  function dtToDateTimeOffset(date?: Date): DateTimeOffset {
    if (date === void 0 || date === null)
      return null;
    let dateStr = date as any as string;
    if (regexDateCs.test(dateStr))
      return dtToDateTimeOffset(dtFromCs(dateStr));
    // let timeZone: string;
    // let timeZoneOffsetValue = getTzOffset(date)/(0.6);
    // let timeZoneOffset = String(Math.abs(timeZoneOffsetValue));
    // let zeroCount = 4 - timeZoneOffset.toString().length;
    // if (zeroCount > 0)
    //     timeZone = '0'.repeat(zeroCount) + timeZoneOffset;
    // else
    //     timeZone = timeZoneOffset;

    return {
      DateTime: dtToCs(date, false),
      OffsetMinutes: getTzOffset(date),
    }
  }
  function dtFromDateTimeOffset(dto?: DateTimeOffset): Date {
    if (!dto)
      return null;
    let date = dtFromCs(dto.DateTime);
    //dto.OffsetMinutes;
    return date;
  }
  function dtToCs(date?: Date, isIncludeTimeZone: boolean = true): string | null {
    if (date === void 0 || date === null)
      return null;
    let dateStr = date as any as string;
    if (regexDateCs.test(dateStr))
      return dateStr;
    if (isServiceLocalTimeZone) {
      const tz = getTzOffset(date);
      const serverTime = date.valueOf() + (tz - serviceTimeZoneOffset) * 60000;
      return `/Date(${serverTime}${timeZoneOffsetToStr(serviceTimeZoneOffset)})/`;
    }

    //timeZoneCs = '';
    return '\/Date(' + date.valueOf().toString() + timeZoneOffsetToStr(getTzOffset(date)) + ')\/';
  }
  function dtFromCs(dateCsStr: string): Date {
    if (!dateCsStr)
      return null;
    //return new Date(dateCsStr);
    let [match, timeStr, matchTz, timeZoneOffsetStr] = regexDateCs.exec(dateCsStr);
    const totalMilliseconds = parseInt(timeStr);
    let date = new Date(totalMilliseconds);


    if (isServiceLocalTimeZone) {
      if (!timeZoneOffsetStr) {
        return date;
      }
      const tz = getTzOffset(date);
      date.setMinutes(date.getMinutes() + serviceTimeZoneOffset - tz);
    }
    // if (timeZoneOffsetStr) { //not a UTC time
    //     let coeff = 1;
    //     if (timeZoneOffsetStr.substring(0, 1) == '-') {
    //         coeff = -1;
    //     }
    //     const tzHours = parseInt(timeZoneOffsetStr.substring(1, 3));
    //     const tzMinutes = parseInt(timeZoneOffsetStr.substring(3));
    //     let timeZoneOffset = coeff * (tzHours * 60 + tzMinutes);
    //     date.setMinutes(date.getMinutes() + timeZoneOffset);
    // }
    return date;
  }
  enum ConvertDirection {
    To = 1,
    From = 2,
  }
  enum ConverterType {
    None = 0,
    DateTime = 1,
    DateTimeOffset = 2,
  }
  const Converter: DictN<DictN<(d: any) => any>> = {
    [ConverterType.None]: {
      [ConvertDirection.From]: obj => obj,
      [ConvertDirection.To]: obj => obj,
    },
    [ConverterType.DateTime]: {
      [ConvertDirection.From]: dtFromCs,
      [ConvertDirection.To]: dtToCs,
    },
    [ConverterType.DateTimeOffset]: {
      [ConvertDirection.From]: dtFromDateTimeOffset,
      [ConvertDirection.To]: dtToDateTimeOffset,
    }
  };
  const ConverterDictionary: DictN<(d: any) => any> = {
    [ConvertDirection.From]: dictionaryFromCs,
    [ConvertDirection.To]: dictionaryToCs
  };
  //let conv = Converter[ConvertType.DateTime][ConvertDirection.To](value);
  type TFieldToConvert = {
    FieldName: string;
    ConverterType: ConverterType;
  }
  //const TypeFieldsDict: Dict<TFieldToConvert[]> = {
  //    'SomeShit': [
  //        {
  //            FieldName: 'DateValue',
  //            ConverterType: ConvertType.DateTime
  //        },
  //        {
  //            FieldName: 'DateCreated',
  //            ConverterType: ConvertType.DateTimeOffset
  //        }
  //    ]
  //};
  function convertSimple00(obj: any, dateConvert: DateConverterFn) {
    return dateConvert(obj);
  }
  function convertSimple(obj: any, convertDirection: ConvertDirection, convertType: ConverterType): any {
    return Converter[convertType][convertDirection](obj);
  }
  function convertSimpleArray<T>(obj: T[], convertDirection: ConvertDirection, convertType: ConverterType, isDictionary: boolean): T[] {
    return convertArray(obj, convertSimple, convertType, convertDirection, isDictionary);
  }
  function noConvert(obj: any, convertDirection: ConvertDirection, convertType: ConverterType) {
    return obj;
  }
  function noConvertArray(obj: any, convertDirection: ConvertDirection, convertType: ConverterType) {
    return ConverterDictionary[convertDirection](obj);
  }
  function convertArray(obj: Dict<any> | Array<any>, convertItemFn: ConvertFn, type: ConverterType, direction: ConvertDirection, isDictionary: boolean): any {
    if (!obj)
      return obj;
    if (isDictionary && direction == ConvertDirection.From) { //obj is Array<KeyValuePair>
      obj = ConverterDictionary[direction](obj);
    }
    for (let i = 0; i < obj.length; i++) {
      if (!isDictionary) {
        obj[i] = convertItemFn(obj[i], direction, type);
      } else {
        obj[i].Value = convertItemFn(obj[i].Value, direction, type);
      }
    }
    if (isDictionary && direction == ConvertDirection.To) { //obj is Dict<KeyValuePair>
      obj = ConverterDictionary[direction](obj);
    }
    return obj;
  }

  //function convertComplex<T extends object & Array<any>>(item: T, direction: ConvertDirection, fields: TFieldToConvert[]): T {
  //    for (let f of fields) {
  //        if (Array.isArray(item[f.FieldName])) {
  //            convertArray(item[f.FieldName], direction, f.ConverterType);
  //            continue;
  //        }
  //        item[f.FieldName] = Converter[f.ConverterType][direction](item[f.FieldName]);
  //    }
  //    return item;
  //}
  //function convertArrayItem(item: any, convertFn: ConverterFn, dateConvert: DateConverterFn, isDictionary: boolean) : any {
  //    if (!isDictionary) {
  //        item = convertFn(item, dateConvert);
  //    } else {
  //        item.Value = convertFn(item.Value, dateConvert);
  //    }
  //    return item;
  //}
  //function convertComplexArray<T>(arr: T[], convertFn: ConverterFn, dateConvert: DateConverterFn , isDictionary: boolean = false) : T[] {
  //    if (!arr)
  //        return;
  //    for (let i = 0; i < arr.length; i++){
  //        arr[i] = convertArrayItem(arr[i], convertFn, dateConvert, isDictionary);
  //    }
  //    return <any>arr;
  //}
  //function convertComplexArrayItem(item: any, convertFn: ConverterFn, convertDirection: ConvertDirection, isDictionary: boolean) : any {
  //    if (!isDictionary) {
  //        item = convertFn(item, convertDirection);
  //    } else {
  //        item.Value = convertFn(item.Value, convertDirection);
  //    }
  //    return item;
  //}
  //function convertComplexArray<T>(arr: T[], convertFn: ConverterFn, convertDirection: ConvertDirection, isDictionary: boolean = false) : T[] {
  //    if (!arr)
  //        return;
  //    for (let i = 0; i < arr.length; i++){
  //        arr[i] = convertComplexArrayItem(arr[i], convertFn, convertDirection, isDictionary);
  //    }
  //    return <any>arr;
  //}
  //function convertSimpleArray<T>(arr: T[], convertDirection: ConvertDirection, convertType: ConverterType, isDictionary: boolean = false) : T[] {
  //    if (!arr)
  //        return;
  //    for (let i = 0; i < arr.length; i++){
  //        arr[i] = convertSimpleArrayItem(arr[i], convertDirection, convertType, isDictionary);
  //    }
  //    return <any>arr;
  //}
  //function convertSimpleArrayItem(item: any, convertDirection: ConvertDirection, convertType: ConverterType, isDictionary: boolean) : any {
  //    if (!isDictionary) {
  //        item = convertSimple(item, convertDirection, convertType);
  //    } else {
  //        item.Value = convertSimple(item, convertDirection, convertType);
  //    }
  //    return item;
  //}
  //function convertDatesComplexArray<T>(res: T[], convertDatesComplex: (v: T, converter: DateConverterFn) => void, dateConvert: DateConverterFn, isDictionary: boolean = false) : T[] {
  //    if (!res)
  //        return;
  //    for (let i = 0; i < res.length; i++){
  //        if (!isDictionary) {
  //            convertDatesComplex(res[i], dateConvert);
  //        } else {
  //            let item = <any>res[i];
  //            item.Value = convertDatesComplex(item.Value, dateConvert);
  //        }
  //    }
  //    return res;
  //}
  function dictionaryFromCs<T>(res: KeyValuePair<any, T>[]): Dict<T> {
    if (!res)
      return;
    let dict = {};
    for (let i = 0; i < res.length; i++) {
      const item = res[i];
      dict[item.Key] = item.Value;
    }
    return dict;
  }
  function dictionaryToCs<T>(res: Dict<any>): KeyValuePair<any, T>[] {
    if (!res)
      return;
    let keys = Object.getOwnPropertyNames(res);
    let arr = [];
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      arr.push({
        Key: key,
        Value: res[key],
      });
    }
    return arr;
  }
  function _objectClone<T>(e: T): T { return { ...e } }
  function clone<T>(object: T): T {
    let obj = <any>object;
    if (typeof obj !== 'object' || obj === null || object instanceof File || object instanceof Blob) {
      return obj;
    }
    //let x = Object.getOwnPropertyNames(obj);

    //if(obj instanceof LureDate) {
    //    return <any>new LureDate(obj.TotalMilliseconds);
    //}
    if (obj instanceof Date) {
      return <any>new Date(obj.getTime());
    }
    if (obj instanceof Array) {
      return obj.reduce((arr, item, i) => {
        arr[i] = clone(item);
        return arr;
      }, []);
    }

    if (obj instanceof Object) {
      return Object.getOwnPropertyNames(obj).reduce((newObj: any, key: string) => {
        newObj[key] = clone<any>(obj[key]);
        return <any>newObj;
      }, {})
    }
  }
  function _isObjectEmpty(obj: any, isStrict: boolean = false) {
    if (isStrict && typeof obj !== 'object')
      return false;
    return !(obj && Object.keys(obj).length > 0);
  }
  type TCallProps<T> = {
    method: string;
    params: object;
    paramsOriginal: object;
    isReturnStream: boolean;
    handlers: ApiTSHandlersCallbacks<T>;
    responseConverter: (v: any) => void;
  }
  function call<T>(promise: Promise<T>, handlers: ApiTSHandlersCallbacks<T> = {}): Promise<T> {
    return promise.then(function (x) {
      // eslint-disable-next-line no-unused-expressions
      handlers.Then ? handlers.Then(x) : null;
      // eslint-disable-next-line no-unused-expressions
      handlers.Finally ? handlers.Finally(x) : null;
      return promise;
    })
      .catch(function (x) {
        handlers.Catch ? handlers.Catch(x) : console.error('[api.call]', x);
        // eslint-disable-next-line no-unused-expressions
        handlers.Finally ? handlers.Finally(x) : null;
        return promise;
      });
    //return promise;
  }
  export function remote_call_promise_wrap<T>(props: TCallProps<T>): Promise<T> {
    return call(
      remote_call_promise(
        props.method,
        props.params,
        props.isReturnStream,
        props.handlers ? props.handlers.BeforeCall : void 0,
        props.responseConverter,
        props.paramsOriginal),
      props.handlers);
  }
  export function remote_call_promise(method: string, params: any, isReturnStream: boolean, beforeCall?: (xreq: XMLHttpRequest) => void, paramsParseDateFromCs?: (v: any) => void, paramsOriginal?: any): Promise<any> {
    return new Promise((resolve, reject) => {
      let isSendStream = false;
      let xhr = new XMLHttpRequest();
      xhr.responseType = isReturnStream ? 'blob' : '';
      xhr.timeout = timeout;
      if (debug && (Object.getOwnPropertyNames(debugExcludes).indexOf(method) < 0)) {
        let SpaceCount = 36 - method.length;
        console.log('%c[api] ' + method + ' '.repeat(SpaceCount > 0 ? SpaceCount : 1) + '-> ', `color: ${Console.ColorSend}; background-color: ${Console.ColorBG}; padding: 3px 7px;`, paramsOriginal);
      }
      xhr.onload = () => {
        let result = xhr.response;
        if (xhr.status === 200 && xhr.responseType !== 'blob' && xhr.response) {
          result = JSON.parse(xhr.response);
          if (paramsParseDateFromCs)
            result = paramsParseDateFromCs(result);
        }
        // if (debug && ( Object.getOwnPropertyNames(debugExcludes).indexOf(method) < 0 || (debugExcludes[method] && !_isObjectEmpty(result, true)) )){
        //     let SpaceCount = 36-method.length;
        //     console.log('%c[api] '+method+' '.repeat(SpaceCount>0? SpaceCount: 1)+'-> ', `color: ${Console.ColorSend}; background-color: ${Console.ColorBG}; padding: 3px 7px;`, paramsOriginal);
        // }
        if ((debug || (typeof (<any>window)['DEBUG'] !== 'undefined' && (<any>window)['DEBUG'])) && (Object.getOwnPropertyNames(debugExcludes).indexOf(method) < 0 || (debugExcludes[method] && !_isObjectEmpty(result, true)))) {
          let SpaceCount = 36 - method.length;
          console.log('%c[api] ' + method + ' '.repeat(SpaceCount > 0 ? SpaceCount : 1) + '<- ', `color: ${Console.ColorResult}; background-color: ${Console.ColorBG}; padding: 3px 7px;`, result);
        }

        if (xhr.status === 200) {
          resolve(result);
        }
        else if (xhr.status === 403) {
          reject('[api ' + method + '] Error 403: Forbidden');
          if (onerror)
            onerror(null, method, params, xhr);
          if (onDeny)
            onDeny(method, params)
        }
        else if (xhr.status === 401) {
          document.cookie = 'ssid=unauthorized;path=/';
          reject('[api ' + method + '] Error 401: Unauthorized');
          if (onerror)
            onerror(null, method, params, xhr);
          if (onUnauth)
            onUnauth(method);
        }
        else {
          reject('[api ' + method + '] Error ' + xhr.status + ': ' + xhr.statusText);
          if (onerror)
            onerror(null, method, params, xhr);
        }
      };
      xhr.onerror = (e: ProgressEvent) => {
        reject(e);
        if (onerror)
          onerror(e, method, params, xhr);
      };
      xhr.addEventListener('timeout', (e) => {
        ontimeout(method, e);
        reject(method);
        if (onerror)
          onerror(e, method, params, xhr);
      });
      xhr.open('POST', serviceName + '/' + method);

      //if input stream:
      if (params && params._StreamHeaders !== void 0 || params._File !== void 0) {
        isSendStream = true;
        let Headers = params._StreamHeaders;
        let ContentDisposition = '';
        let keys = Object.getOwnPropertyNames(Headers);
        for (let i = 0; i < keys.length; i++) {
          let key = keys[i];
          if (typeof Headers[key] === 'string')
            Headers[key] = Headers[key].replace(/;/g, '');
          ContentDisposition += `${key}= ${btoa(encodeURIComponent(Headers[key]))}`;
          if (i < keys.length - 1) {
            ContentDisposition += ';';
          }
        }
        delete params._StreamHeaders;
        xhr.setRequestHeader('Content-Disposition', ContentDisposition);
        xhr.setRequestHeader('Content-Type', 'multipart/form-data');
      }
      if (method === 'Login')
        xhr.setRequestHeader('Authorization', make_base_auth(params.Login, params.Pass));
      if (beforeCall)
        beforeCall(xhr);
      if (!isSendStream) {
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        //xhr.setRequestHeader('Content-Type', 'text/plain; charset=utf-8'); // - for NewtonSoft.JsonSerializer
        //xhr.setRequestHeader('Accept','application/json');
        xhr.send(JSON.stringify(params));
      }
      else
        xhr.send(params._File);
    });
  }


  export interface web_Helpdesk_ServiceTasks_Get_Result {
    ServiceTaskID: number;
    SystemName: string;
    FirmName: string;
    AccountNumFull: string;
    TaskTypeID?: number;
    Second?: number;
    TaskTypeName: string;
    FinishDate?: Date;
    CreatedAt?: Date;
    CloseDate?: Date;
    Result: string;
    ProtocolQuan?: number;
  }
  function convertDatesComplex_web_Helpdesk_ServiceTasks_Get_Result(obj: web_Helpdesk_ServiceTasks_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_ServiceTasks_Get_Result {
    if (!obj)
      return;
    obj['FinishDate'] = convertSimple(obj['FinishDate'], convertDirection, ConverterType.DateTime);
    obj['CreatedAt'] = convertSimple(obj['CreatedAt'], convertDirection, ConverterType.DateTime);
    obj['CloseDate'] = convertSimple(obj['CloseDate'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Helpdesk_AdminDesktop_TicketStateStat_Get_Result {
    StateCount?: number;
    StatusID?: number;
    name: string;
  }
  function convertDatesComplex_web_Helpdesk_AdminDesktop_TicketStateStat_Get_Result(obj: web_Helpdesk_AdminDesktop_TicketStateStat_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_AdminDesktop_TicketStateStat_Get_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Helpdesk_AdminDesktop_TicketThemaStat_Get_Result {
    StateCount?: number;
    ThemaID: number;
    Name: string;
  }
  function convertDatesComplex_web_Helpdesk_AdminDesktop_TicketThemaStat_Get_Result(obj: web_Helpdesk_AdminDesktop_TicketThemaStat_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_AdminDesktop_TicketThemaStat_Get_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Helpdesk_AdminDesktop_SystemAnalizStat_Get_Result {
    DiagnosticPass: number;
    DiagnosticUnder: number;
    DiagnosticNeeded: number;
  }
  function convertDatesComplex_web_Helpdesk_AdminDesktop_SystemAnalizStat_Get_Result(obj: web_Helpdesk_AdminDesktop_SystemAnalizStat_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_AdminDesktop_SystemAnalizStat_Get_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Helpdesk_AdminDesktop_SystemAnalizFirmList_Get_Result {
    FirmID: number;
    FirmName: string;
  }
  function convertDatesComplex_web_Helpdesk_AdminDesktop_SystemAnalizFirmList_Get_Result(obj: web_Helpdesk_AdminDesktop_SystemAnalizFirmList_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_AdminDesktop_SystemAnalizFirmList_Get_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface hd_TicketHistoryGet_Result {
    ID?: number;
    DateCreated?: Date;
    name: string;
    TypeID: number;
    FullName: string;
    StateID: number;
  }
  function convertDatesComplex_hd_TicketHistoryGet_Result(obj: hd_TicketHistoryGet_Result, convertDirection: ConvertDirection): hd_TicketHistoryGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_HelpDesk_FirmRegisterQueryGet_Result {
    ID: number;
    LoginID: number;
    FirmCityID: number;
    Address: string;
    Name: string;
    DateCreated: Date;
    Status: number;
    HandledUser: string;
    HandledDate?: number;
  }
  function convertDatesComplex_web_HelpDesk_FirmRegisterQueryGet_Result(obj: web_HelpDesk_FirmRegisterQueryGet_Result, convertDirection: ConvertDirection): web_HelpDesk_FirmRegisterQueryGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface RegisterHildingTokenInfo {
    Token: string;
    DateExpired: Date;
  }
  function convertDatesComplex_RegisterHildingTokenInfo(obj: RegisterHildingTokenInfo, convertDirection: ConvertDirection): RegisterHildingTokenInfo {
    if (!obj)
      return;
    obj['DateExpired'] = convertSimple(obj['DateExpired'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface UserRegHoldingInfoDTO {
    HoldingName: string;
    Firms: SimpleIDNameDTO[];
  }
  function convertDatesComplex_UserRegHoldingInfoDTO(obj: UserRegHoldingInfoDTO, convertDirection: ConvertDirection): UserRegHoldingInfoDTO {
    if (!obj)
      return;
    obj['Firms'] = convertArray(obj['Firms'], convertDatesComplex_SimpleIDNameDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface SimpleIDNameDTO {
    ID: number;
    Name: string;
  }
  function convertDatesComplex_SimpleIDNameDTO(obj: SimpleIDNameDTO, convertDirection: ConvertDirection): SimpleIDNameDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface web_HelpDesk_UserRegisterQueryGet_Result {
    FirmID: number;
    LoginEmail: string;
    Name: string;
    Phone: string;
    DateCreated: Date;
    IsHandled: boolean;
    ID: number;
  }
  function convertDatesComplex_web_HelpDesk_UserRegisterQueryGet_Result(obj: web_HelpDesk_UserRegisterQueryGet_Result, convertDirection: ConvertDirection): web_HelpDesk_UserRegisterQueryGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Helpdesk_MM_Requests_Get_Result {
    ID: number;
    DateCreated: Date;
    UserID: number;
    Subject: string;
    Body: string;
    Phone: string;
    PersonName: string;
    StateID: number;
    ShopAddress: string;
    MonitoringComment: string;
    StatusName: string;
    Login: string;
    PaymentItemID?: number;
    IsServiceProvided: boolean;
    MonitoringManagerName: string;
    FirmName: string;
    FirmAddress: string;
  }
  function convertDatesComplex_web_Helpdesk_MM_Requests_Get_Result(obj: web_Helpdesk_MM_Requests_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_MM_Requests_Get_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Helpdesk_MM_RequestSessions_Get_Result {
    ID: number;
    DateCreated: Date;
    DateClosed?: Date;
  }
  function convertDatesComplex_web_Helpdesk_MM_RequestSessions_Get_Result(obj: web_Helpdesk_MM_RequestSessions_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_MM_RequestSessions_Get_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    obj['DateClosed'] = convertSimple(obj['DateClosed'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Helpdesk_MM_PaymentUserItems_Get_Result {
    ID: number;
    DateCreated: Date;
    HoldingID?: number;
    UserID: number;
    ServiceItemID: number;
    DatePayment: Date;
    Quan: number;
    DayQuan: number;
    IsActive: boolean;
    ItemName: string;
    RequestQuanProvided?: number;
    RequestQuanNonProvided?: number;
    PaymentID?: Guid;
  }
  function convertDatesComplex_web_Helpdesk_MM_PaymentUserItems_Get_Result(obj: web_Helpdesk_MM_PaymentUserItems_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_MM_PaymentUserItems_Get_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    obj['DatePayment'] = convertSimple(obj['DatePayment'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface GentlePack {
    UserID: number;
    HoldingID: number;
    UserName: string;
    Email: string;
    Phone: string;
    PositionID: number;
    WebSettings: string;
    Roles: number[];
    SubRoles: DictN<number[]>;
    HoldingInfo: HoldingInfo;
    Cache: GentlePackCache;
  }
  function convertDatesComplex_GentlePack(obj: GentlePack, convertDirection: ConvertDirection): GentlePack {
    if (!obj)
      return;
    obj['Roles'] = convertArray(obj['Roles'], convertSimple, ConverterType.None, convertDirection, false);
    obj['SubRoles'] = convertArray(obj['SubRoles'], noConvertArray, ConverterType.None, convertDirection, true);
    obj['HoldingInfo'] = convertDatesComplex_HoldingInfo(obj['HoldingInfo'], convertDirection);
    obj['Cache'] = convertDatesComplex_GentlePackCache(obj['Cache'], convertDirection);
    return obj;
  }


  export interface HoldingInfo {
    ID: number;
    Name: string;
    PaymentDate?: Date;
    TicketViewDate?: Date;
    TicketViewPeriod?: number;
    CurrentDate: Date;
    IsMagnetPro: boolean;
    DebtSum?: number;
  }
  function convertDatesComplex_HoldingInfo(obj: HoldingInfo, convertDirection: ConvertDirection): HoldingInfo {
    if (!obj)
      return;
    obj['PaymentDate'] = convertSimple(obj['PaymentDate'], convertDirection, ConverterType.DateTime);
    obj['TicketViewDate'] = convertSimple(obj['TicketViewDate'], convertDirection, ConverterType.DateTime);
    obj['CurrentDate'] = convertSimple(obj['CurrentDate'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface GentlePackCache {
    UserList: UserDTO[];
  }
  function convertDatesComplex_GentlePackCache(obj: GentlePackCache, convertDirection: ConvertDirection): GentlePackCache {
    if (!obj)
      return;
    obj['UserList'] = convertArray(obj['UserList'], convertDatesComplex_UserDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface UserDTO {
    ID: number;
    Position: string;
    PositionID: number;
    DepartmentID: number;
    Name: string;
    Email: string;
    Phone: string;
    Login: string;
    Pass: string;
    Roles: number[];
    SubRoles: DictN<number[]>;
    LibraryIDList: number[];
    LibraryRegionIDList: number[];
  }
  function convertDatesComplex_UserDTO(obj: UserDTO, convertDirection: ConvertDirection): UserDTO {
    if (!obj)
      return;
    obj['Roles'] = convertArray(obj['Roles'], convertSimple, ConverterType.None, convertDirection, false);
    obj['SubRoles'] = convertArray(obj['SubRoles'], noConvertArray, ConverterType.None, convertDirection, true);
    obj['LibraryIDList'] = convertArray(obj['LibraryIDList'], convertSimple, ConverterType.None, convertDirection, false);
    obj['LibraryRegionIDList'] = convertArray(obj['LibraryRegionIDList'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface RolesPack {
    Roles: number[];
    SubRoles: DictN<number[]>;
  }
  function convertDatesComplex_RolesPack(obj: RolesPack, convertDirection: ConvertDirection): RolesPack {
    if (!obj)
      return;
    obj['Roles'] = convertArray(obj['Roles'], convertSimple, ConverterType.None, convertDirection, false);
    obj['SubRoles'] = convertArray(obj['SubRoles'], noConvertArray, ConverterType.None, convertDirection, true);
    return obj;
  }


  export interface TestDeepDate {
    ID: number;
    DateValue: Date;
    Inner: TestDeepDateInner;
  }
  function convertDatesComplex_TestDeepDate(obj: TestDeepDate, convertDirection: ConvertDirection): TestDeepDate {
    if (!obj)
      return;
    obj['DateValue'] = convertSimple(obj['DateValue'], convertDirection, ConverterType.DateTime);
    obj['Inner'] = convertDatesComplex_TestDeepDateInner(obj['Inner'], convertDirection);
    return obj;
  }


  export interface TestDeepDateInner {
    ID: number;
    DateCreated: Date;
  }
  function convertDatesComplex_TestDeepDateInner(obj: TestDeepDateInner, convertDirection: ConvertDirection): TestDeepDateInner {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface Request {
    ID: number;
    DateCreated: number;
    DateCreatedStr: string;
    Subject: string;
    Body: string;
    RequiredTime: number;
    RequiredTimeStr: string;
    Phone: string;
    PersonName: string;
    State: string;
  }
  function convertDatesComplex_Request(obj: Request, convertDirection: ConvertDirection): Request {
    if (!obj)
      return;
    return obj;
  }


  export interface ConfigFile {
    RequestID: number;
    ConfigDate: number;
    ConfigDateStr: string;
    FileData: number[];
  }
  function convertDatesComplex_ConfigFile(obj: ConfigFile, convertDirection: ConvertDirection): ConfigFile {
    if (!obj)
      return;
    obj['FileData'] = convertArray(obj['FileData'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface ServiceItem {
    ID: number;
    Name: string;
    Info: string;
    PriceRUR: number;
    FullQuan: number;
    FullDayQuan: number;
  }
  function convertDatesComplex_ServiceItem(obj: ServiceItem, convertDirection: ConvertDirection): ServiceItem {
    if (!obj)
      return;
    return obj;
  }


  export interface PaymentNew {
    PayID: string;
    URL: string;
  }
  function convertDatesComplex_PaymentNew(obj: PaymentNew, convertDirection: ConvertDirection): PaymentNew {
    if (!obj)
      return;
    return obj;
  }


  export interface UserInfo {
    ID: number;
    Login: string;
    MagnetLogin: string;
    MagnetLoginID: number;
    MagnetHolding: string;
  }
  function convertDatesComplex_UserInfo(obj: UserInfo, convertDirection: ConvertDirection): UserInfo {
    if (!obj)
      return;
    return obj;
  }


  export interface PaymentsTotal {
    AvalibleQuan: number;
    AvalibleDayQuan: number;
    QuanExpiredDate: number;
    QuanExpiredDateStr: string;
  }
  function convertDatesComplex_PaymentsTotal(obj: PaymentsTotal, convertDirection: ConvertDirection): PaymentsTotal {
    if (!obj)
      return;
    return obj;
  }


  export interface Payment {
    ID: number;
    DatePayment: number;
    DatePaymentStr: string;
    ServiceID: number;
    Name: string;
    Info: string;
    PriceRUR: number;
    FullQuan: number;
    FullDayQuan: number;
    AvalibleQuan: number;
    AvalibleDayQuan: number;
    QuanProvided: number;
    QuanExpiredDate: number;
    QuanExpiredDateStr: string;
    TransactionID: string;
  }
  function convertDatesComplex_Payment(obj: Payment, convertDirection: ConvertDirection): Payment {
    if (!obj)
      return;
    return obj;
  }


  export interface Session {
    Port: number;
    Host: string;
    Settings: string;
  }
  function convertDatesComplex_Session(obj: Session, convertDirection: ConvertDirection): Session {
    if (!obj)
      return;
    return obj;
  }


  export interface ResultMsg {
    Code: number;
    Msg: string;
  }
  function convertDatesComplex_ResultMsg(obj: ResultMsg, convertDirection: ConvertDirection): ResultMsg {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Notifications_Get_Result {
    ID: number;
    DateCreated: Date;
    Text: string;
    TypeID: number;
    TargetID: number;
    LoginID: number;
    InitiatorLoginID: number;
    IsRead: boolean;
    IsDone: boolean;
  }
  function convertDatesComplex_web_Notifications_Get_Result(obj: web_Notifications_Get_Result, convertDirection: ConvertDirection): web_Notifications_Get_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_FirmCheckingGet_Result {
    ID: number;
    FirmID: number;
    DateCreated: Date;
    MagnetLoginID: number;
    DateChecking: Date;
    LossValue: string;
    Comment: string;
    FirmName: string;
    Login: string;
  }
  function convertDatesComplex_web_Face_FirmCheckingGet_Result(obj: web_Face_FirmCheckingGet_Result, convertDirection: ConvertDirection): web_Face_FirmCheckingGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    obj['DateChecking'] = convertSimple(obj['DateChecking'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_IncidentsGet2_Result {
    ID: number;
    DateCreated: Date;
    DateIncident: Date;
    DateIncidentFinish?: Date;
    IncidentType: number;
    LossAmount: number;
    Comment: string;
    UserName: string;
    IsPrevented: number;
    VisitorCount?: number;
    FirmID: number;
  }
  function convertDatesComplex_web_Face_IncidentsGet2_Result(obj: web_Face_IncidentsGet2_Result, convertDirection: ConvertDirection): web_Face_IncidentsGet2_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    obj['DateIncident'] = convertSimple(obj['DateIncident'], convertDirection, ConverterType.DateTime);
    obj['DateIncidentFinish'] = convertSimple(obj['DateIncidentFinish'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface IncidentOptionsDTO {
    TimeMinBefore_1: number;
    TimeMinAfter_1: number;
    AllVisitors_1: number;
    AllVisitors_ForTimeInterval_2?: number;
    Price_1: number;
    Price_2: number;
    Price_3: number;
    Price_4: number;
  }
  function convertDatesComplex_IncidentOptionsDTO(obj: IncidentOptionsDTO, convertDirection: ConvertDirection): IncidentOptionsDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_IncidentOptionsPriceHistoryGet_Result {
    ID: number;
    DateCreated: Date;
    Price1: number;
    Price2: number;
    Price3: number;
    Price4: number;
  }
  function convertDatesComplex_web_Face_IncidentOptionsPriceHistoryGet_Result(obj: web_Face_IncidentOptionsPriceHistoryGet_Result, convertDirection: ConvertDirection): web_Face_IncidentOptionsPriceHistoryGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_IncidentOptionsHistoryGet_Result {
    TimeMinBefore_1: number;
    TimeMinAfter_1: number;
    AllVisitors_1: number;
    AllVisitors_ForTimeInterval_2: number;
    DateCreated: Date;
  }
  function convertDatesComplex_web_Face_IncidentOptionsHistoryGet_Result(obj: web_Face_IncidentOptionsHistoryGet_Result, convertDirection: ConvertDirection): web_Face_IncidentOptionsHistoryGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_IncidentVisitorsGet2_Result {
    VisitorID: number;
    PersonTypeID: number;
    CommentSecurity: string;
    PersonPhotoID?: number;
    ActionDate_Incident?: Date;
    ActionDate_1?: Date;
    ActionDate_2?: Date;
    ActionDate_8?: Date;
  }
  function convertDatesComplex_web_Face_IncidentVisitorsGet2_Result(obj: web_Face_IncidentVisitorsGet2_Result, convertDirection: ConvertDirection): web_Face_IncidentVisitorsGet2_Result {
    if (!obj)
      return;
    obj['ActionDate_Incident'] = convertSimple(obj['ActionDate_Incident'], convertDirection, ConverterType.DateTime);
    obj['ActionDate_1'] = convertSimple(obj['ActionDate_1'], convertDirection, ConverterType.DateTime);
    obj['ActionDate_2'] = convertSimple(obj['ActionDate_2'], convertDirection, ConverterType.DateTime);
    obj['ActionDate_8'] = convertSimple(obj['ActionDate_8'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface PersonsTimeBoardGet_Result {
    ID: number;
    Date: Date;
    PersonID: number;
    DateStart?: Date;
    DateFinish?: Date;
    CaptureCount?: number;
    PhotoID: number;
    FirstName: string;
    LastName: string;
  }
  function convertDatesComplex_PersonsTimeBoardGet_Result(obj: PersonsTimeBoardGet_Result, convertDirection: ConvertDirection): PersonsTimeBoardGet_Result {
    if (!obj)
      return;
    obj['Date'] = convertSimple(obj['Date'], convertDirection, ConverterType.DateTime);
    obj['DateStart'] = convertSimple(obj['DateStart'], convertDirection, ConverterType.DateTime);
    obj['DateFinish'] = convertSimple(obj['DateFinish'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface PersonDocumentsGet_Result {
    ID: number;
    DateCreated: Date;
    PersonID: number;
    Name: string;
    StateID: number;
    FirstName: string;
    LastName: string;
    PhotoID: number;
    FirmID: number;
    FirmName: string;
  }
  function convertDatesComplex_PersonDocumentsGet_Result(obj: PersonDocumentsGet_Result, convertDirection: ConvertDirection): PersonDocumentsGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_Model_SS_Report2_Result {
    DateCreated?: number;
    Sum1?: number;
    Sum2?: number;
    Sum3?: number;
    Sum4?: number;
    NotPreventedSum: number;
    PreventedSum: number;
  }
  function convertDatesComplex_web_Face_Model_SS_Report2_Result(obj: web_Face_Model_SS_Report2_Result, convertDirection: ConvertDirection): web_Face_Model_SS_Report2_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_SS_DetailReport_Result {
    FirmID?: number;
    FirmName: string;
    BadCount_1?: number;
    BadCount_2?: number;
    BadCount_3?: number;
    BadCount_4?: number;
    BadCount_1_1?: number;
    BadCount_2_1?: number;
    BadCount_3_1?: number;
    BadCount_4_1?: number;
    BadCount_1_2?: number;
    BadCount_2_2?: number;
    BadCount_3_2?: number;
    BadCount_4_2?: number;
    IncidentPreventedCount: number;
    IncidentPreventedAmount?: number;
    KoefTrue: number;
    KoefEffective?: number;
    DateChecking?: Date;
  }
  function convertDatesComplex_web_Face_SS_DetailReport_Result(obj: web_Face_SS_DetailReport_Result, convertDirection: ConvertDirection): web_Face_SS_DetailReport_Result {
    if (!obj)
      return;
    obj['DateChecking'] = convertSimple(obj['DateChecking'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_SS_MainReport_Result {
    IncidentCount?: number;
    IncidentCount_Type1?: number;
    IncidentCount_Type2?: number;
    NotPreventedSum?: number;
    PreventedSum?: number;
    CheckCount_2?: number;
    CheckCount_3?: number;
    CheckCount_4?: number;
    WatchedTimeCount?: number;
    AcceptedTimeCount?: number;
    BadCount_1?: number;
    BadCount_2?: number;
    BadCount_3?: number;
    BadCount_4?: number;
    BadCount1_RUR?: number;
    BadCount2_RUR?: number;
    BadCount3_RUR?: number;
    BadCount4_RUR?: number;
  }
  function convertDatesComplex_web_Face_SS_MainReport_Result(obj: web_Face_SS_MainReport_Result, convertDirection: ConvertDirection): web_Face_SS_MainReport_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_Model_ActionResultReport_ByDay2_Result {
    HourValue?: number;
    Cnt1?: number;
    Cnt2?: number;
    Cnt3?: number;
    Cnt4?: number;
  }
  function convertDatesComplex_web_Face_Model_ActionResultReport_ByDay2_Result(obj: web_Face_Model_ActionResultReport_ByDay2_Result, convertDirection: ConvertDirection): web_Face_Model_ActionResultReport_ByDay2_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_Model_HoldingDB_Report_Result {
    Cnt1?: number;
    Cnt2?: number;
    Cnt3?: number;
    Cnt4?: number;
  }
  function convertDatesComplex_web_Face_Model_HoldingDB_Report_Result(obj: web_Face_Model_HoldingDB_Report_Result, convertDirection: ConvertDirection): web_Face_Model_HoldingDB_Report_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_Model_ActionReport2_Result {
    DateCreated?: Date;
    Cnt1?: number;
    Cnt2?: number;
    Cnt3?: number;
    Cnt4?: number;
  }
  function convertDatesComplex_web_Face_Model_ActionReport2_Result(obj: web_Face_Model_ActionReport2_Result, convertDirection: ConvertDirection): web_Face_Model_ActionReport2_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_Model_ActionResultReport2_Result {
    DateCreated?: Date;
    Cnt1?: number;
    Cnt2?: number;
    Cnt3?: number;
    Cnt4?: number;
  }
  function convertDatesComplex_web_Face_Model_ActionResultReport2_Result(obj: web_Face_Model_ActionResultReport2_Result, convertDirection: ConvertDirection): web_Face_Model_ActionResultReport2_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_MarketingTrafficGet_Result {
    PersonTypeID: number;
    F1?: number;
    F2?: number;
    F3?: number;
    F4?: number;
    F5?: number;
    M1?: number;
    M2?: number;
    M3?: number;
    M4?: number;
    M5?: number;
  }
  function convertDatesComplex_web_Face_MarketingTrafficGet_Result(obj: web_Face_MarketingTrafficGet_Result, convertDirection: ConvertDirection): web_Face_MarketingTrafficGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_MarketingTrafficByCamerasGet_Result {
    PersonTypeID: number;
    F1?: number;
    F2?: number;
    F3?: number;
    F4?: number;
    F5?: number;
    M1?: number;
    M2?: number;
    M3?: number;
    M4?: number;
    M5?: number;
  }
  function convertDatesComplex_web_Face_MarketingTrafficByCamerasGet_Result(obj: web_Face_MarketingTrafficByCamerasGet_Result, convertDirection: ConvertDirection): web_Face_MarketingTrafficByCamerasGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_ConversionTrafficGet_Result {
    ID: number;
    Name: string;
    CntAll?: number;
    CntF1?: number;
    CntF2?: number;
    CntF3?: number;
    CntF4?: number;
    CntF5?: number;
    CntM1?: number;
    CntM2?: number;
    CntM3?: number;
    CntM4?: number;
    CntM5?: number;
  }
  function convertDatesComplex_web_Face_ConversionTrafficGet_Result(obj: web_Face_ConversionTrafficGet_Result, convertDirection: ConvertDirection): web_Face_ConversionTrafficGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_ConversionByCameraByHoursGet_Result {
    HourValue?: number;
    CntOne?: number;
    CntAll?: number;
    Value?: number;
  }
  function convertDatesComplex_web_Face_ConversionByCameraByHoursGet_Result(obj: web_Face_ConversionByCameraByHoursGet_Result, convertDirection: ConvertDirection): web_Face_ConversionByCameraByHoursGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_MarketingEmotionGet_Result {
    Quan: number;
    id: number;
    name: string;
    PercCnt: number;
  }
  function convertDatesComplex_web_Face_MarketingEmotionGet_Result(obj: web_Face_MarketingEmotionGet_Result, convertDirection: ConvertDirection): web_Face_MarketingEmotionGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_MarketingEmotionbyCamerasGet_Result {
    Quan: number;
    id: number;
    name: string;
    PercCnt: number;
  }
  function convertDatesComplex_web_Face_MarketingEmotionbyCamerasGet_Result(obj: web_Face_MarketingEmotionbyCamerasGet_Result, convertDirection: ConvertDirection): web_Face_MarketingEmotionbyCamerasGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_MarketingAverageTimeInOutGet_Result {
    Man_18_30: number;
    Man_31_40: number;
    Man_41_50: number;
    Man_51: number;
    Woman_18_30: number;
    Woman_31_40: number;
    Woman_41_50: number;
    Woman_51: number;
    Child_0_6: number;
    Child_7_12: number;
    Child_13_17: number;
  }
  function convertDatesComplex_web_Face_MarketingAverageTimeInOutGet_Result(obj: web_Face_MarketingAverageTimeInOutGet_Result, convertDirection: ConvertDirection): web_Face_MarketingAverageTimeInOutGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_MarketingAverageTimeKassaGet_Result {
    Man_18_30: number;
    Man_31_40: number;
    Man_41_50: number;
    Man_51: number;
    Woman_18_30: number;
    Woman_31_40: number;
    Woman_41_50: number;
    Woman_51: number;
    Child_0_6: number;
    Child_7_12: number;
    Child_13_17: number;
  }
  function convertDatesComplex_web_Face_MarketingAverageTimeKassaGet_Result(obj: web_Face_MarketingAverageTimeKassaGet_Result, convertDirection: ConvertDirection): web_Face_MarketingAverageTimeKassaGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_MarketingAverageTimeByDayOfWeekGet_Result {
    Man_1: number;
    Woman_1: number;
    Man_2: number;
    Woman_2: number;
    Man_3: number;
    Woman_3: number;
    Man_4: number;
    Woman_4: number;
    Man_5: number;
    Woman_5: number;
    Man_6: number;
    Woman_6: number;
    Man_7: number;
    Woman_7: number;
  }
  function convertDatesComplex_web_Face_MarketingAverageTimeByDayOfWeekGet_Result(obj: web_Face_MarketingAverageTimeByDayOfWeekGet_Result, convertDirection: ConvertDirection): web_Face_MarketingAverageTimeByDayOfWeekGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_MarketingAverageTimeKassaByAvgGet_Result {
    Rank?: number;
    AvgMin?: number;
    AvgMax?: number;
    QuanManPerc?: number;
    QuanWomanPerc?: number;
  }
  function convertDatesComplex_web_Face_MarketingAverageTimeKassaByAvgGet_Result(obj: web_Face_MarketingAverageTimeKassaByAvgGet_Result, convertDirection: ConvertDirection): web_Face_MarketingAverageTimeKassaByAvgGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_MarketingRushHoursByCamerasGet_Result {
    HourID: number;
    Dow1: number;
    Dow2: number;
    Dow3: number;
    Dow4: number;
    Dow5: number;
    Dow6: number;
    Dow7: number;
  }
  function convertDatesComplex_web_Face_MarketingRushHoursByCamerasGet_Result(obj: web_Face_MarketingRushHoursByCamerasGet_Result, convertDirection: ConvertDirection): web_Face_MarketingRushHoursByCamerasGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface FaceVisitorSummaryDTO {
    PersonTypeID: number;
    Values: FaceVisitorSummaryValueDTO[];
  }
  function convertDatesComplex_FaceVisitorSummaryDTO(obj: FaceVisitorSummaryDTO, convertDirection: ConvertDirection): FaceVisitorSummaryDTO {
    if (!obj)
      return;
    obj['Values'] = convertArray(obj['Values'], convertDatesComplex_FaceVisitorSummaryValueDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface FaceVisitorSummaryValueDTO {
    VisitorCount: number;
    Count_Subtype_1: number;
    Count_Subtype_2: number;
    Count_Subtype_3: number;
    Count_Subtype_4: number;
  }
  function convertDatesComplex_FaceVisitorSummaryValueDTO(obj: FaceVisitorSummaryValueDTO, convertDirection: ConvertDirection): FaceVisitorSummaryValueDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_StatVisitsGet2_Result {
    VisitorHistoryID: number;
    VisitorID: number;
    DateDetection: Date;
    WatchedTime?: Date;
    AcceptedTime?: Date;
    CommentSecurity: string;
    PersonTypeID?: number;
    PersonSubTypeID: number;
    VisitPhotoID: number;
    PersonPhotoID?: number;
  }
  function convertDatesComplex_web_Face_StatVisitsGet2_Result(obj: web_Face_StatVisitsGet2_Result, convertDirection: ConvertDirection): web_Face_StatVisitsGet2_Result {
    if (!obj)
      return;
    obj['DateDetection'] = convertSimple(obj['DateDetection'], convertDirection, ConverterType.DateTime);
    obj['WatchedTime'] = convertSimple(obj['WatchedTime'], convertDirection, ConverterType.DateTime);
    obj['AcceptedTime'] = convertSimple(obj['AcceptedTime'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_StatVisitsGet3_Result {
    VisitorHistoryID: number;
    VisitorID: number;
    DateDetection: Date;
    WatchedTime?: Date;
    AcceptedTime?: Date;
    CommentSecurity: string;
    VisitPhotoID: number;
    PersonPhotoID?: number;
    PersonTypeID?: number;
    PersonSubTypeID?: number;
  }
  function convertDatesComplex_web_Face_StatVisitsGet3_Result(obj: web_Face_StatVisitsGet3_Result, convertDirection: ConvertDirection): web_Face_StatVisitsGet3_Result {
    if (!obj)
      return;
    obj['DateDetection'] = convertSimple(obj['DateDetection'], convertDirection, ConverterType.DateTime);
    obj['WatchedTime'] = convertSimple(obj['WatchedTime'], convertDirection, ConverterType.DateTime);
    obj['AcceptedTime'] = convertSimple(obj['AcceptedTime'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_StatVisitsPeriodGet2_Result {
    VisitorHistoryID: number;
    VisitorID: number;
    DateDetection: Date;
    WatchedTime?: Date;
    AcceptedTime?: Date;
    CommentSecurity: string;
    VisitPhotoID: number;
    PersonPhotoID?: number;
    PersonTypeID?: number;
    PersonSubTypeID?: number;
  }
  function convertDatesComplex_web_Face_StatVisitsPeriodGet2_Result(obj: web_Face_StatVisitsPeriodGet2_Result, convertDirection: ConvertDirection): web_Face_StatVisitsPeriodGet2_Result {
    if (!obj)
      return;
    obj['DateDetection'] = convertSimple(obj['DateDetection'], convertDirection, ConverterType.DateTime);
    obj['WatchedTime'] = convertSimple(obj['WatchedTime'], convertDirection, ConverterType.DateTime);
    obj['AcceptedTime'] = convertSimple(obj['AcceptedTime'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_StatWatchedGet2_Result {
    VisitorID: number;
    VisitPhotoID: number;
    PersonPhotoID?: number;
    DateDetection: Date;
    WatchedTime?: Date;
    WathedUserName: string;
    PersonTypeID?: number;
    InfoSecurity: string;
  }
  function convertDatesComplex_web_Face_StatWatchedGet2_Result(obj: web_Face_StatWatchedGet2_Result, convertDirection: ConvertDirection): web_Face_StatWatchedGet2_Result {
    if (!obj)
      return;
    obj['DateDetection'] = convertSimple(obj['DateDetection'], convertDirection, ConverterType.DateTime);
    obj['WatchedTime'] = convertSimple(obj['WatchedTime'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_Stat_VistiHistoryGet_Result {
    ID: number;
    DateDetection: Date;
    WatchedTime?: Date;
  }
  function convertDatesComplex_web_Face_Stat_VistiHistoryGet_Result(obj: web_Face_Stat_VistiHistoryGet_Result, convertDirection: ConvertDirection): web_Face_Stat_VistiHistoryGet_Result {
    if (!obj)
      return;
    obj['DateDetection'] = convertSimple(obj['DateDetection'], convertDirection, ConverterType.DateTime);
    obj['WatchedTime'] = convertSimple(obj['WatchedTime'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface FaceBaseInfoDTO {
    PersonTagTypes: web_Face_BasePersonTagTypesGet_Result[];
  }
  function convertDatesComplex_FaceBaseInfoDTO(obj: FaceBaseInfoDTO, convertDirection: ConvertDirection): FaceBaseInfoDTO {
    if (!obj)
      return;
    obj['PersonTagTypes'] = convertArray(obj['PersonTagTypes'], convertDatesComplex_web_Face_BasePersonTagTypesGet_Result, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface web_Face_BasePersonTagTypesGet_Result {
    ID: number;
    Name: string;
    Caption: string;
    Rate: number;
    Color?: number;
    IsHidden: boolean;
  }
  function convertDatesComplex_web_Face_BasePersonTagTypesGet_Result(obj: web_Face_BasePersonTagTypesGet_Result, convertDirection: ConvertDirection): web_Face_BasePersonTagTypesGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_BaseSummaryGet_Result {
    TypeID: number;
    Count?: number;
  }
  function convertDatesComplex_web_Face_BaseSummaryGet_Result(obj: web_Face_BaseSummaryGet_Result, convertDirection: ConvertDirection): web_Face_BaseSummaryGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_BasePersonsGet2_Result {
    VisitorID: number;
    PersonTypeID: number;
    PersonSubTypeID?: number;
    FirstName: string;
    LastName: string;
    DateCreated: Date;
    LastChange: Date;
    DateOfBirth?: Date;
    Sex?: boolean;
    CommentShop: string;
    CommentSecurity: string;
    PhotoID: number;
  }
  function convertDatesComplex_web_Face_BasePersonsGet2_Result(obj: web_Face_BasePersonsGet2_Result, convertDirection: ConvertDirection): web_Face_BasePersonsGet2_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    obj['LastChange'] = convertSimple(obj['LastChange'], convertDirection, ConverterType.DateTime);
    obj['DateOfBirth'] = convertSimple(obj['DateOfBirth'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_BasePersonGroupGet_Result {
    ID: number;
    DateCreated: Date;
    PhotoID: number;
  }
  function convertDatesComplex_web_Face_BasePersonGroupGet_Result(obj: web_Face_BasePersonGroupGet_Result, convertDirection: ConvertDirection): web_Face_BasePersonGroupGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface FacePersonSaveDTO {
    Photo: string;
    VisitorHistoryID: number;
    VisitorID: number;
    PersonTypeID: number;
    FirstName: string;
    LastName: string;
    Gender: boolean;
    DateOfBirth: Date;
    LastVisit?: Date;
    DateDetection?: Date;
    CommentShop: string;
    CommentSecurity: string;
    VisitPhotoID: number;
    PersonPhotoID: number;
    Tags: FacePersonTagDTO[];
    WatchedTime?: Date;
    WatchedUserName: string;
  }
  function convertDatesComplex_FacePersonSaveDTO(obj: FacePersonSaveDTO, convertDirection: ConvertDirection): FacePersonSaveDTO {
    if (!obj)
      return;
    obj['DateOfBirth'] = convertSimple(obj['DateOfBirth'], convertDirection, ConverterType.DateTime);
    obj['LastVisit'] = convertSimple(obj['LastVisit'], convertDirection, ConverterType.DateTime);
    obj['DateDetection'] = convertSimple(obj['DateDetection'], convertDirection, ConverterType.DateTime);
    obj['Tags'] = convertArray(obj['Tags'], convertDatesComplex_FacePersonTagDTO, ConverterType.None, convertDirection, false);
    obj['WatchedTime'] = convertSimple(obj['WatchedTime'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface FacePersonTagDTO {
    ID?: number;
    TypeID: number;
    Author: string;
    Comment: string;
    DateCreated?: Date;
  }
  function convertDatesComplex_FacePersonTagDTO(obj: FacePersonTagDTO, convertDirection: ConvertDirection): FacePersonTagDTO {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_HoldingPersonTag_List_Result {
    ID: number;
    HoldingID: number;
    Caption: string;
    Color: string;
  }
  function convertDatesComplex_web_HoldingPersonTag_List_Result(obj: web_HoldingPersonTag_List_Result, convertDirection: ConvertDirection): web_HoldingPersonTag_List_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_ShopUsersGet_Result {
    ID: number;
    Login: string;
    LastLogin?: Date;
    Email: string;
  }
  function convertDatesComplex_web_Face_ShopUsersGet_Result(obj: web_Face_ShopUsersGet_Result, convertDirection: ConvertDirection): web_Face_ShopUsersGet_Result {
    if (!obj)
      return;
    obj['LastLogin'] = convertSimple(obj['LastLogin'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface HelpDeskUserDTO {
    ID: number;
    Login: string;
    Name: string;
    Email: string;
    Phone: string;
    Roles: number[];
    FirmIDs: number[];
  }
  function convertDatesComplex_HelpDeskUserDTO(obj: HelpDeskUserDTO, convertDirection: ConvertDirection): HelpDeskUserDTO {
    if (!obj)
      return;
    obj['Roles'] = convertArray(obj['Roles'], convertSimple, ConverterType.None, convertDirection, false);
    obj['FirmIDs'] = convertArray(obj['FirmIDs'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface HelpDeskUserAddDTO {
    ID: number;
    Login: string;
    Name: string;
    Email: string;
    Phone: string;
    Pwd: string;
    AccessLevel: number;
    FirmIDs: number[];
  }
  function convertDatesComplex_HelpDeskUserAddDTO(obj: HelpDeskUserAddDTO, convertDirection: ConvertDirection): HelpDeskUserAddDTO {
    if (!obj)
      return;
    obj['FirmIDs'] = convertArray(obj['FirmIDs'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface TicketDTO {
    ID: number;
    DateCreated: Date;
    DateLastModified?: Date;
    ThemaID: number;
    StatusID: number;
    Body: string;
    ContactName: string;
    ContactPhone: string;
    ServiceTaskID?: number;
    FirmID: number;
    AntennaCount?: number;
    FileID?: number;
    FileName: string;
    LoginName: string;
    LoginExtName: string;
    Quan?: number;
    QuanPhoto: number;
    FirmName: string;
    Result: string;
    Files: FileInfoDTO[];
  }
  function convertDatesComplex_TicketDTO(obj: TicketDTO, convertDirection: ConvertDirection): TicketDTO {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    obj['DateLastModified'] = convertSimple(obj['DateLastModified'], convertDirection, ConverterType.DateTime);
    obj['Files'] = convertArray(obj['Files'], convertDatesComplex_FileInfoDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface FileInfoDTO {
    ID: number;
    Name: string;
  }
  function convertDatesComplex_FileInfoDTO(obj: FileInfoDTO, convertDirection: ConvertDirection): FileInfoDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Helpdesk_Firms_Get_Result {
    FirmID: number;
    FirmName: string;
    FirmAddress: string;
    CityID?: number;
    GeoPosE?: number;
    GeoPosS?: number;
    Coords: string;
    RadioRating: number;
  }
  function convertDatesComplex_web_Helpdesk_Firms_Get_Result(obj: web_Helpdesk_Firms_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_Firms_Get_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface HelpdeskCatalogDTO {
    StatusList: SimpleIDNameDTO[];
    ThemeList: SimpleIDNameDTO[];
    FirmCities: CityDTO[];
    FirmOffices: SimpleIDNameDTO[];
  }
  function convertDatesComplex_HelpdeskCatalogDTO(obj: HelpdeskCatalogDTO, convertDirection: ConvertDirection): HelpdeskCatalogDTO {
    if (!obj)
      return;
    obj['StatusList'] = convertArray(obj['StatusList'], convertDatesComplex_SimpleIDNameDTO, ConverterType.None, convertDirection, false);
    obj['ThemeList'] = convertArray(obj['ThemeList'], convertDatesComplex_SimpleIDNameDTO, ConverterType.None, convertDirection, false);
    obj['FirmCities'] = convertArray(obj['FirmCities'], convertDatesComplex_CityDTO, ConverterType.None, convertDirection, false);
    obj['FirmOffices'] = convertArray(obj['FirmOffices'], convertDatesComplex_SimpleIDNameDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface CityDTO {
    ID: number;
    Name: string;
    OfficeID: number;
  }
  function convertDatesComplex_CityDTO(obj: CityDTO, convertDirection: ConvertDirection): CityDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Helpdesk_ChatMessages_Get_Result {
    ID: number;
    DateCreated: Date;
    Message: string;
    LoginID: number;
    Name: string;
  }
  function convertDatesComplex_web_Helpdesk_ChatMessages_Get_Result(obj: web_Helpdesk_ChatMessages_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_ChatMessages_Get_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Helpdesk_MapTickets_Get_Result {
    ID: number;
    DateCreated: Date;
    DateLastModified?: Date;
    ThemaID: number;
    StatusID: number;
    Body: string;
    ContactName: string;
    ContactPhone: string;
    FirmID: number;
    FirmName: string;
    FirmAddress: string;
    Coords: string;
    ServiceTaskID?: number;
    MinOnService?: number;
    NightTask?: number;
    TaskDate?: Date;
    ServiceManager: string;
    Experience: string;
    CountTask?: number;
    ExperienceMonth?: number;
    HourQuan: number;
  }
  function convertDatesComplex_web_Helpdesk_MapTickets_Get_Result(obj: web_Helpdesk_MapTickets_Get_Result, convertDirection: ConvertDirection): web_Helpdesk_MapTickets_Get_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    obj['DateLastModified'] = convertSimple(obj['DateLastModified'], convertDirection, ConverterType.DateTime);
    obj['TaskDate'] = convertSimple(obj['TaskDate'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface TreeItemsDTO {
    regions: RegionDTO[];
  }
  function convertDatesComplex_TreeItemsDTO(obj: TreeItemsDTO, convertDirection: ConvertDirection): TreeItemsDTO {
    if (!obj)
      return;
    obj['regions'] = convertArray(obj['regions'], convertDatesComplex_RegionDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface RegionDTO {
    id: number;
    name: string;
    cities: CityItemDTO[];
    type: string;
  }
  function convertDatesComplex_RegionDTO(obj: RegionDTO, convertDirection: ConvertDirection): RegionDTO {
    if (!obj)
      return;
    obj['cities'] = convertArray(obj['cities'], convertDatesComplex_CityItemDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface CityItemDTO {
    id: number;
    name: string;
    regionid: number;
    shops: ShopDTO[];
    type: string;
  }
  function convertDatesComplex_CityItemDTO(obj: CityItemDTO, convertDirection: ConvertDirection): CityItemDTO {
    if (!obj)
      return;
    obj['shops'] = convertArray(obj['shops'], convertDatesComplex_ShopDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface ShopDTO {
    id: number;
    name: string;
    cityid: number;
    devices: DeviceDTO[];
    type: string;
  }
  function convertDatesComplex_ShopDTO(obj: ShopDTO, convertDirection: ConvertDirection): ShopDTO {
    if (!obj)
      return;
    obj['devices'] = convertArray(obj['devices'], convertDatesComplex_DeviceDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface DeviceDTO {
    id: number;
    name: string;
    shopid: number;
    type: string;
  }
  function convertDatesComplex_DeviceDTO(obj: DeviceDTO, convertDirection: ConvertDirection): DeviceDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface ReportObjectDTO {
    id: string;
    type: string;
  }
  function convertDatesComplex_ReportObjectDTO(obj: ReportObjectDTO, convertDirection: ConvertDirection): ReportObjectDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface StatReportDTO {
    ChartType: string;
    DateBegin: string;
    DateEnd: string;
    TypeGroup: string;
    ReportType: string;
    ReportName: string;
    ItemCaptions: string[];
    Items: ReportItemDTO[];
  }
  function convertDatesComplex_StatReportDTO(obj: StatReportDTO, convertDirection: ConvertDirection): StatReportDTO {
    if (!obj)
      return;
    obj['ItemCaptions'] = convertArray(obj['ItemCaptions'], convertSimple, ConverterType.None, convertDirection, false);
    obj['Items'] = convertArray(obj['Items'], convertDatesComplex_ReportItemDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface ReportItemDTO {
    Title: string;
    ElementID: string;
    Data: DataItemDTO[];
    Coordinates: number[];
  }
  function convertDatesComplex_ReportItemDTO(obj: ReportItemDTO, convertDirection: ConvertDirection): ReportItemDTO {
    if (!obj)
      return;
    obj['Data'] = convertArray(obj['Data'], convertDatesComplex_DataItemDTO, ConverterType.None, convertDirection, false);
    obj['Coordinates'] = convertArray(obj['Coordinates'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface DataItemDTO {
    Caption: string;
    Values: string[];
  }
  function convertDatesComplex_DataItemDTO(obj: DataItemDTO, convertDirection: ConvertDirection): DataItemDTO {
    if (!obj)
      return;
    obj['Values'] = convertArray(obj['Values'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface GetTrafficLog_Result {
    DateCreated: Date;
    Message: string;
    DeviceID?: number;
    EventType: number;
    Category: number;
    MessageID: number;
    DeviceName: string;
    ShopName: string;
    DateCreatedPOSIX?: number;
  }
  function convertDatesComplex_GetTrafficLog_Result(obj: GetTrafficLog_Result, convertDirection: ConvertDirection): GetTrafficLog_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface TrafficLogGet_Result {
    DateCreated: Date;
    Message: string;
    DeviceID?: number;
    EventType: number;
    Category: number;
    MessageID: number;
    DeviceName: string;
    ShopName: string;
    DateCreatedPOSIX?: number;
  }
  function convertDatesComplex_TrafficLogGet_Result(obj: TrafficLogGet_Result, convertDirection: ConvertDirection): TrafficLogGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface DeviceStateGet_Result {
    DateCreated: Date;
    DateCreatedPOSIX?: number;
    Region: string;
    City: string;
    Shop: string;
    Device: string;
    State: string;
  }
  function convertDatesComplex_DeviceStateGet_Result(obj: DeviceStateGet_Result, convertDirection: ConvertDirection): DeviceStateGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface ShopPropsDTO {
    weektime: WorkTimeDTO[];
    checktime: WorkTimeDTO;
    limitdayalarm: number;
    limitnightalarm: number;
    limitnightpass: number;
    limitofflinehours: boolean;
    limitoffline: boolean;
    checkstateopen: boolean;
  }
  function convertDatesComplex_ShopPropsDTO(obj: ShopPropsDTO, convertDirection: ConvertDirection): ShopPropsDTO {
    if (!obj)
      return;
    obj['weektime'] = convertArray(obj['weektime'], convertDatesComplex_WorkTimeDTO, ConverterType.None, convertDirection, false);
    obj['checktime'] = convertDatesComplex_WorkTimeDTO(obj['checktime'], convertDirection);
    return obj;
  }


  export interface WorkTimeDTO {
    begin: string;
    end: string;
  }
  function convertDatesComplex_WorkTimeDTO(obj: WorkTimeDTO, convertDirection: ConvertDirection): WorkTimeDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface WidgetDTO {
    id: number;
    typeid: number;
    datetype: string;
    color: string;
    position: number;
    objects: ReportObjectDTO[];
  }
  function convertDatesComplex_WidgetDTO(obj: WidgetDTO, convertDirection: ConvertDirection): WidgetDTO {
    if (!obj)
      return;
    obj['objects'] = convertArray(obj['objects'], convertDatesComplex_ReportObjectDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface SupportRequestDTO {
    id: number;
    datecreated: string;
    theme: string;
    category: number;
    state: number;
    messages: SupportMessageDTO[];
  }
  function convertDatesComplex_SupportRequestDTO(obj: SupportRequestDTO, convertDirection: ConvertDirection): SupportRequestDTO {
    if (!obj)
      return;
    obj['messages'] = convertArray(obj['messages'], convertDatesComplex_SupportMessageDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface SupportMessageDTO {
    id: number;
    datecreated: string;
    message: string;
    author: string;
  }
  function convertDatesComplex_SupportMessageDTO(obj: SupportMessageDTO, convertDirection: ConvertDirection): SupportMessageDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface ChartDTO {
    id: number;
    typeid: number;
    datetype: string;
    charttype: string;
    grouptype: string;
    size: number;
    position: number;
    objects: ReportObjectDTO[];
  }
  function convertDatesComplex_ChartDTO(obj: ChartDTO, convertDirection: ConvertDirection): ChartDTO {
    if (!obj)
      return;
    obj['objects'] = convertArray(obj['objects'], convertDatesComplex_ReportObjectDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface LastDataDTO {
    Traffic: number;
    TrafficEvent: number;
    TrafficLog: number;
    TrafficWarning: number;
  }
  function convertDatesComplex_LastDataDTO(obj: LastDataDTO, convertDirection: ConvertDirection): LastDataDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface ImportDataDTO {
    LastTraffic: number;
    LastTrafficEvent: number;
    LastTrafficLog: number;
    LastTrafficWarning: number;
    SerialNumber: string;
    Regions: ImportRegionDTO[];
  }
  function convertDatesComplex_ImportDataDTO(obj: ImportDataDTO, convertDirection: ConvertDirection): ImportDataDTO {
    if (!obj)
      return;
    obj['Regions'] = convertArray(obj['Regions'], convertDatesComplex_ImportRegionDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface ImportRegionDTO {
    GUID: string;
    Name: string;
    Cities: ImportCityDTO[];
  }
  function convertDatesComplex_ImportRegionDTO(obj: ImportRegionDTO, convertDirection: ConvertDirection): ImportRegionDTO {
    if (!obj)
      return;
    obj['Cities'] = convertArray(obj['Cities'], convertDatesComplex_ImportCityDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface ImportCityDTO {
    GUID: string;
    Name: string;
    Shops: ImportShopDTO[];
  }
  function convertDatesComplex_ImportCityDTO(obj: ImportCityDTO, convertDirection: ConvertDirection): ImportCityDTO {
    if (!obj)
      return;
    obj['Shops'] = convertArray(obj['Shops'], convertDatesComplex_ImportShopDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface ImportShopDTO {
    GUID: string;
    Name: string;
    GeoPosS: number;
    GeoPosE: number;
    Devices: ImportDeviceDTO[];
    TrafficWarning: TrafficWarningRecordDTO[];
  }
  function convertDatesComplex_ImportShopDTO(obj: ImportShopDTO, convertDirection: ConvertDirection): ImportShopDTO {
    if (!obj)
      return;
    obj['Devices'] = convertArray(obj['Devices'], convertDatesComplex_ImportDeviceDTO, ConverterType.None, convertDirection, false);
    obj['TrafficWarning'] = convertArray(obj['TrafficWarning'], convertDatesComplex_TrafficWarningRecordDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface ImportDeviceDTO {
    GUID: string;
    Name: string;
    Traffic: TrafficRecordDTO[];
    TrafficEvent: TrafficEventRecordDTO[];
    TrafficLog: TrafficLogRecordDTO[];
  }
  function convertDatesComplex_ImportDeviceDTO(obj: ImportDeviceDTO, convertDirection: ConvertDirection): ImportDeviceDTO {
    if (!obj)
      return;
    obj['Traffic'] = convertArray(obj['Traffic'], convertDatesComplex_TrafficRecordDTO, ConverterType.None, convertDirection, false);
    obj['TrafficEvent'] = convertArray(obj['TrafficEvent'], convertDatesComplex_TrafficEventRecordDTO, ConverterType.None, convertDirection, false);
    obj['TrafficLog'] = convertArray(obj['TrafficLog'], convertDatesComplex_TrafficLogRecordDTO, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface TrafficRecordDTO {
    ID: number;
    DateCreated: string;
    Jamming: number;
    Magnet: number;
    Metal: number;
    RealIn: number;
    RealOut: number;
    Alarm: number;
  }
  function convertDatesComplex_TrafficRecordDTO(obj: TrafficRecordDTO, convertDirection: ConvertDirection): TrafficRecordDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface TrafficEventRecordDTO {
    ID: number;
    DateCreated: string;
    Lost: number;
    Repair: number;
    ChangeSettings: number;
    PowerOn: number;
  }
  function convertDatesComplex_TrafficEventRecordDTO(obj: TrafficEventRecordDTO, convertDirection: ConvertDirection): TrafficEventRecordDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface TrafficLogRecordDTO {
    ID: number;
    DateCreated: string;
    Message: string;
    EventType: number;
    Category: number;
    MessageID: number;
  }
  function convertDatesComplex_TrafficLogRecordDTO(obj: TrafficLogRecordDTO, convertDirection: ConvertDirection): TrafficLogRecordDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface TrafficWarningRecordDTO {
    ID: number;
    DateCreated: string;
    DateBegin: string;
    DateEnd: string;
    Value: number;
    WarningType: number;
  }
  function convertDatesComplex_TrafficWarningRecordDTO(obj: TrafficWarningRecordDTO, convertDirection: ConvertDirection): TrafficWarningRecordDTO {
    if (!obj)
      return;
    return obj;
  }


  export interface FirmMapDTO {
    ID: number;
    Name: string;
    Address: string;
    GeoPosS: number;
    GeoPosE: number;
    CounVisit: number;
    CountFirmInHolding: number;
    CountRisk: number;
    FirmHoldingID: number;
    StatusID: number;
    Date: Date;
    TaskID: number;
    SystemName: string;
    techno: string;
    State: string;
    width: string;
    indicators: string;
    enable: string;
    false_posit: string;
    detection: string;
    protective_sensor_list: string;
    info: string;
    count_antenna: number;
    count_entrance: number;
    ISDouble: number;
    nearest_store: string;
    provider: string;
    exit_type: string;
    flooring_type: string;
    techno_ns: string;
    Comment: string;
    Status_0: number;
    Status_1: number;
    Status_2: number;
    Status_3: number;
    Status_4: number;
    Status_5: number;
    Status_6: number;
    MainStatus: number;
    Images: string[];
  }
  function convertDatesComplex_FirmMapDTO(obj: FirmMapDTO, convertDirection: ConvertDirection): FirmMapDTO {
    if (!obj)
      return;
    obj['Date'] = convertSimple(obj['Date'], convertDirection, ConverterType.DateTime);
    obj['Images'] = convertArray(obj['Images'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface FirmServiceMapDTO {
    ID: number;
    Name: string;
    Address: string;
    GeoPosS: number;
    GeoPosE: number;
    VisitID: number;
    OnService: number;
    MinOnService: number;
    NigthTask: number;
    TaskDate: Date;
    ServiceManager: string;
    Experience: string;
    CountTask: number;
    VisitDate: Date;
    techno: string;
    State: string;
    width: string;
    false_posit: string;
    detection: string;
    count_antenna: number;
    count_entrance: number;
    Status_0: number;
    Status_1: number;
    Status_2: number;
    Status_3: number;
    Status_4: number;
    Status_5: number;
    Status_6: number;
    MainStatus: number;
    Images: string[];
  }
  function convertDatesComplex_FirmServiceMapDTO(obj: FirmServiceMapDTO, convertDirection: ConvertDirection): FirmServiceMapDTO {
    if (!obj)
      return;
    obj['TaskDate'] = convertSimple(obj['TaskDate'], convertDirection, ConverterType.DateTime);
    obj['VisitDate'] = convertSimple(obj['VisitDate'], convertDirection, ConverterType.DateTime);
    obj['Images'] = convertArray(obj['Images'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface web_Face_BaseVisitorTagCommentGet_Result {
    DateCreated: Date;
    TagTypeID: number;
    Comment: string;
    UserName: string;
  }
  function convertDatesComplex_web_Face_BaseVisitorTagCommentGet_Result(obj: web_Face_BaseVisitorTagCommentGet_Result, convertDirection: ConvertDirection): web_Face_BaseVisitorTagCommentGet_Result {
    if (!obj)
      return;
    obj['DateCreated'] = convertSimple(obj['DateCreated'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_FaceDetect_Firms_Get_Result {
    FirmID: number;
    FirmName: string;
    FirmAddress: string;
    CityID?: number;
    GeoPosE?: number;
    GeoPosS?: number;
  }
  function convertDatesComplex_web_FaceDetect_Firms_Get_Result(obj: web_FaceDetect_Firms_Get_Result, convertDirection: ConvertDirection): web_FaceDetect_Firms_Get_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface web_Face_VisitorsByIDsGet2_Result {
    VisitorID: number;
    PersonTypeID: number;
    CommentSecurity: string;
    VisitPhotoID: number;
    PersonPhotoID?: number;
    ActionDate_Incident?: Date;
    ActionDate_1?: Date;
    ActionDate_2?: Date;
    ActionDate_8?: Date;
  }
  function convertDatesComplex_web_Face_VisitorsByIDsGet2_Result(obj: web_Face_VisitorsByIDsGet2_Result, convertDirection: ConvertDirection): web_Face_VisitorsByIDsGet2_Result {
    if (!obj)
      return;
    obj['ActionDate_Incident'] = convertSimple(obj['ActionDate_Incident'], convertDirection, ConverterType.DateTime);
    obj['ActionDate_1'] = convertSimple(obj['ActionDate_1'], convertDirection, ConverterType.DateTime);
    obj['ActionDate_2'] = convertSimple(obj['ActionDate_2'], convertDirection, ConverterType.DateTime);
    obj['ActionDate_8'] = convertSimple(obj['ActionDate_8'], convertDirection, ConverterType.DateTime);
    return obj;
  }


  export interface web_Face_GetCamerasList_Result {
    DeviceID: number;
    Tag: string;
    Caption: string;
    CameraID: number;
    FirmID: number;
    ConversionTypeID: number;
  }
  function convertDatesComplex_web_Face_GetCamerasList_Result(obj: web_Face_GetCamerasList_Result, convertDirection: ConvertDirection): web_Face_GetCamerasList_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface FaceVisitorSummaryVisitOnlyDTO {
    PersonTypeID: number;
    Values: number[];
  }
  function convertDatesComplex_FaceVisitorSummaryVisitOnlyDTO(obj: FaceVisitorSummaryVisitOnlyDTO, convertDirection: ConvertDirection): FaceVisitorSummaryVisitOnlyDTO {
    if (!obj)
      return;
    obj['Values'] = convertArray(obj['Values'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface web_Face_AnalyticsVisitsByGenderGet_Result {
    PersonTypeID: number;
    Male14?: number;
    Male30?: number;
    Male31?: number;
    Female14?: number;
    Female30?: number;
    Female31?: number;
  }
  function convertDatesComplex_web_Face_AnalyticsVisitsByGenderGet_Result(obj: web_Face_AnalyticsVisitsByGenderGet_Result, convertDirection: ConvertDirection): web_Face_AnalyticsVisitsByGenderGet_Result {
    if (!obj)
      return;
    return obj;
  }


  export interface FaceVisitChart {
    AxisX: number[];
    Series: FaceVisitChartSeries[];
  }
  function convertDatesComplex_FaceVisitChart(obj: FaceVisitChart, convertDirection: ConvertDirection): FaceVisitChart {
    if (!obj)
      return;
    obj['AxisX'] = convertArray(obj['AxisX'], convertSimple, ConverterType.None, convertDirection, false);
    obj['Series'] = convertArray(obj['Series'], convertDatesComplex_FaceVisitChartSeries, ConverterType.None, convertDirection, false);
    return obj;
  }


  export interface FaceVisitChartSeries {
    Caption: string;
    Data: number[];
  }
  function convertDatesComplex_FaceVisitChartSeries(obj: FaceVisitChartSeries, convertDirection: ConvertDirection): FaceVisitChartSeries {
    if (!obj)
      return;
    obj['Data'] = convertArray(obj['Data'], convertSimple, ConverterType.None, convertDirection, false);
    return obj;
  }



  export function Helpdesk_Ticket_SetDone(ticketID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { ticketID: ticketID };




    return remote_call_promise_wrap({
      method: 'Helpdesk_Ticket_SetDone',
      params: { ticketID: ticketID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_Ticket_File_Add(fileStream: Blob, headers: TFileStreamHeaders, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { _File: fileStream, _StreamHeaders: headers };


    headers.size = fileStream.size;
    headers.filename = headers.filename ? headers.filename : (<File>fileStream).name;


    return remote_call_promise_wrap({
      method: 'Helpdesk_Ticket_File_Add',
      params: { _File: fileStream, _StreamHeaders: headers },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_Ticket_File_Get(fileID: number, handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { fileID: fileID };




    return remote_call_promise_wrap({
      method: 'Helpdesk_Ticket_File_Get',
      params: { fileID: fileID },
      paramsOriginal: paramsOriginal,
      isReturnStream: true,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_ServiceProtocolFromSuperBaseGet(serviceTaskID: number, protocolNo: number, handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { serviceTaskID: serviceTaskID, protocolNo: protocolNo };




    return remote_call_promise_wrap({
      method: 'Helpdesk_ServiceProtocolFromSuperBaseGet',
      params: { serviceTaskID: serviceTaskID, protocolNo: protocolNo },
      paramsOriginal: paramsOriginal,
      isReturnStream: true,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_ServiceTasks_Get(dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_ServiceTasks_Get_Result[]>): Promise<web_Helpdesk_ServiceTasks_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Helpdesk_ServiceTasks_Get_Result[]): web_Helpdesk_ServiceTasks_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_ServiceTasks_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_ServiceTasks_Get',
      params: { dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_AdminDesktop_TicketStateStat_Get(dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_AdminDesktop_TicketStateStat_Get_Result[]>): Promise<web_Helpdesk_AdminDesktop_TicketStateStat_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Helpdesk_AdminDesktop_TicketStateStat_Get_Result[]): web_Helpdesk_AdminDesktop_TicketStateStat_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_AdminDesktop_TicketStateStat_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_AdminDesktop_TicketStateStat_Get',
      params: { dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_AdminDesktop_TicketThemaStat_Get(dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_AdminDesktop_TicketThemaStat_Get_Result[]>): Promise<web_Helpdesk_AdminDesktop_TicketThemaStat_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Helpdesk_AdminDesktop_TicketThemaStat_Get_Result[]): web_Helpdesk_AdminDesktop_TicketThemaStat_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_AdminDesktop_TicketThemaStat_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_AdminDesktop_TicketThemaStat_Get',
      params: { dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_AdminDesktop_SystemAnalizStat_Get(dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_AdminDesktop_SystemAnalizStat_Get_Result[]>): Promise<web_Helpdesk_AdminDesktop_SystemAnalizStat_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Helpdesk_AdminDesktop_SystemAnalizStat_Get_Result[]): web_Helpdesk_AdminDesktop_SystemAnalizStat_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_AdminDesktop_SystemAnalizStat_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_AdminDesktop_SystemAnalizStat_Get',
      params: { dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_AdminDesktop_SystemAnalizFirmList_Get(dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_AdminDesktop_SystemAnalizFirmList_Get_Result[]>): Promise<web_Helpdesk_AdminDesktop_SystemAnalizFirmList_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Helpdesk_AdminDesktop_SystemAnalizFirmList_Get_Result[]): web_Helpdesk_AdminDesktop_SystemAnalizFirmList_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_AdminDesktop_SystemAnalizFirmList_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_AdminDesktop_SystemAnalizFirmList_Get',
      params: { dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_TicketHistoryGet(ticketID: number, handlers?: ApiTSHandlersCallbacks<hd_TicketHistoryGet_Result[]>): Promise<hd_TicketHistoryGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { ticketID: ticketID };


    function returnDateConverter(res: hd_TicketHistoryGet_Result[]): hd_TicketHistoryGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_hd_TicketHistoryGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_TicketHistoryGet',
      params: { ticketID: ticketID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function HelpDesk_FirmRegisterQueryAdd(firmCityID: number, name: string, address: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmCityID: firmCityID, name: name, address: address };




    return remote_call_promise_wrap({
      method: 'HelpDesk_FirmRegisterQueryAdd',
      params: { firmCityID: firmCityID, name: name, address: address },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function HelpDesk_FirmRegisterQueryGet(queryID: number, handlers?: ApiTSHandlersCallbacks<web_HelpDesk_FirmRegisterQueryGet_Result[]>): Promise<web_HelpDesk_FirmRegisterQueryGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { queryID: queryID };


    function returnDateConverter(res: web_HelpDesk_FirmRegisterQueryGet_Result[]): web_HelpDesk_FirmRegisterQueryGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_HelpDesk_FirmRegisterQueryGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'HelpDesk_FirmRegisterQueryGet',
      params: { queryID: queryID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function HelpDesk_UserRegisterHoldingTokenGet(lifeTimeInDays: number, handlers?: ApiTSHandlersCallbacks<RegisterHildingTokenInfo>): Promise<RegisterHildingTokenInfo> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { lifeTimeInDays: lifeTimeInDays };


    function returnDateConverter(res: RegisterHildingTokenInfo): RegisterHildingTokenInfo {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_RegisterHildingTokenInfo(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'HelpDesk_UserRegisterHoldingTokenGet',
      params: { lifeTimeInDays: lifeTimeInDays },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function HelpDesk_UserRegisterHoldingTokenReset(lifeTimeInDays: number, handlers?: ApiTSHandlersCallbacks<RegisterHildingTokenInfo>): Promise<RegisterHildingTokenInfo> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { lifeTimeInDays: lifeTimeInDays };


    function returnDateConverter(res: RegisterHildingTokenInfo): RegisterHildingTokenInfo {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_RegisterHildingTokenInfo(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'HelpDesk_UserRegisterHoldingTokenReset',
      params: { lifeTimeInDays: lifeTimeInDays },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function HelpDesk_UserRegisterHoldingInfoGet(holdingToken: string, handlers?: ApiTSHandlersCallbacks<UserRegHoldingInfoDTO>): Promise<UserRegHoldingInfoDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { holdingToken: holdingToken };


    function returnDateConverter(res: UserRegHoldingInfoDTO): UserRegHoldingInfoDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_UserRegHoldingInfoDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'HelpDesk_UserRegisterHoldingInfoGet',
      params: { holdingToken: holdingToken },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function HelpDesk_UserRegisterQueryAdd(holdingAlias: string, firmID: number, email: string, name: string, phone: string, pass: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { holdingAlias: holdingAlias, firmID: firmID, email: email, name: name, phone: phone, pass: pass };




    return remote_call_promise_wrap({
      method: 'HelpDesk_UserRegisterQueryAdd',
      params: { holdingAlias: holdingAlias, firmID: firmID, email: email, name: name, phone: phone, pass: pass },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function HelpDesk_UserRegisterQueryGet(handlers?: ApiTSHandlersCallbacks<web_HelpDesk_UserRegisterQueryGet_Result[]>): Promise<web_HelpDesk_UserRegisterQueryGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: web_HelpDesk_UserRegisterQueryGet_Result[]): web_HelpDesk_UserRegisterQueryGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_HelpDesk_UserRegisterQueryGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'HelpDesk_UserRegisterQueryGet',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function HelpDesk_UserRegisterQueryApply(queryID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { queryID: queryID };




    return remote_call_promise_wrap({
      method: 'HelpDesk_UserRegisterQueryApply',
      params: { queryID: queryID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function HelpDesk_UserRegisterQueryRemove(queryID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { queryID: queryID };




    return remote_call_promise_wrap({
      method: 'HelpDesk_UserRegisterQueryRemove',
      params: { queryID: queryID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_MM_Requests_Get(requestID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_MM_Requests_Get_Result[]>): Promise<web_Helpdesk_MM_Requests_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { requestID: requestID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Helpdesk_MM_Requests_Get_Result[]): web_Helpdesk_MM_Requests_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_MM_Requests_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_MM_Requests_Get',
      params: { requestID: requestID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_MM_Sessions_Get(requestID: number, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_MM_RequestSessions_Get_Result[]>): Promise<web_Helpdesk_MM_RequestSessions_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { requestID: requestID };


    function returnDateConverter(res: web_Helpdesk_MM_RequestSessions_Get_Result[]): web_Helpdesk_MM_RequestSessions_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_MM_RequestSessions_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_MM_Sessions_Get',
      params: { requestID: requestID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_MM_RequestToOpenSet(requestID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { requestID: requestID };




    return remote_call_promise_wrap({
      method: 'Helpdesk_MM_RequestToOpenSet',
      params: { requestID: requestID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_MM_PaymentUserItems_Get(dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_MM_PaymentUserItems_Get_Result[]>): Promise<web_Helpdesk_MM_PaymentUserItems_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Helpdesk_MM_PaymentUserItems_Get_Result[]): web_Helpdesk_MM_PaymentUserItems_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_MM_PaymentUserItems_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_MM_PaymentUserItems_Get',
      params: { dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Cache_Reload(handlers?: ApiTSHandlersCallbacks<void>): Promise<void> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};




    return remote_call_promise_wrap({
      method: 'Cache_Reload',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Cache_Check(handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};




    return remote_call_promise_wrap({
      method: 'Cache_Check',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function GetStartPack(handlers?: ApiTSHandlersCallbacks<GentlePack>): Promise<GentlePack> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: GentlePack): GentlePack {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_GentlePack(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'GetStartPack',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function GetRoles(handlers?: ApiTSHandlersCallbacks<RolesPack>): Promise<RolesPack> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: RolesPack): RolesPack {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_RolesPack(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'GetRoles',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function ServiceTimeZoneHandshake(clientTzOffset: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { clientTzOffset: clientTzOffset };




    return remote_call_promise_wrap({
      method: 'ServiceTimeZoneHandshake',
      params: { clientTzOffset: clientTzOffset },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function User_WebSettingsUpdate(WebSetttings: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { WebSetttings: WebSetttings };




    return remote_call_promise_wrap({
      method: 'User_WebSettingsUpdate',
      params: { WebSetttings: WebSetttings },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Cache_Drop(handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};




    return remote_call_promise_wrap({
      method: 'Cache_Drop',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Test_GetUserAgent(handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};




    return remote_call_promise_wrap({
      method: 'Test_GetUserAgent',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Test_DeepDates(testDate: TestDeepDate, handlers?: ApiTSHandlersCallbacks<TestDeepDate>): Promise<TestDeepDate> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { testDate: testDate };

    const convertDirection = ConvertDirection.To;
    testDate = convertDatesComplex_TestDeepDate(testDate, convertDirection);

    function returnDateConverter(res: TestDeepDate): TestDeepDate {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_TestDeepDate(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'Test_DeepDates',
      params: { testDate: testDate },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmGetTest(s: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { s: s };




    return remote_call_promise_wrap({
      method: 'mmGetTest',
      params: { s: s },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmGetTest2(s: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { s: s };




    return remote_call_promise_wrap({
      method: 'mmGetTest2',
      params: { s: s },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function GetEcho(s: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { s: s };




    return remote_call_promise_wrap({
      method: 'GetEcho',
      params: { s: s },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmRegistration(email: string, passEnc: string, accountNo: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { email: email, passEnc: passEnc, accountNo: accountNo };




    return remote_call_promise_wrap({
      method: 'mmRegistration',
      params: { email: email, passEnc: passEnc, accountNo: accountNo },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmRepeatCode(email: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { email: email };




    return remote_call_promise_wrap({
      method: 'mmRepeatCode',
      params: { email: email },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmActivation(email: string, code: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { email: email, code: code };




    return remote_call_promise_wrap({
      method: 'mmActivation',
      params: { email: email, code: code },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmGetToken(login: string, passEnc: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { login: login, passEnc: passEnc };




    return remote_call_promise_wrap({
      method: 'mmGetToken',
      params: { login: login, passEnc: passEnc },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmRestorePass(email: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { email: email };




    return remote_call_promise_wrap({
      method: 'mmRestorePass',
      params: { email: email },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmChangePassword(login: string, oldPassEnc: string, newPassEnc: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { login: login, oldPassEnc: oldPassEnc, newPassEnc: newPassEnc };




    return remote_call_promise_wrap({
      method: 'mmChangePassword',
      params: { login: login, oldPassEnc: oldPassEnc, newPassEnc: newPassEnc },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmNewRequest(token: string, subject: string, body: string, phone: string, personName: string, requiredTime: number, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token, subject: subject, body: body, phone: phone, personName: personName, requiredTime: requiredTime };




    return remote_call_promise_wrap({
      method: 'mmNewRequest',
      params: { token: token, subject: subject, body: body, phone: phone, personName: personName, requiredTime: requiredTime },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmGetRequests(token: string, handlers?: ApiTSHandlersCallbacks<Request[]>): Promise<Request[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token };


    function returnDateConverter(res: Request[]): Request[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_Request, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'mmGetRequests',
      params: { token: token },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmGetConfigFiles(token: string, deviceType: number, handlers?: ApiTSHandlersCallbacks<ConfigFile[]>): Promise<ConfigFile[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token, deviceType: deviceType };


    function returnDateConverter(res: ConfigFile[]): ConfigFile[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_ConfigFile, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'mmGetConfigFiles',
      params: { token: token, deviceType: deviceType },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmGetPaymentRequests(token: string, paymentID: number, handlers?: ApiTSHandlersCallbacks<Request[]>): Promise<Request[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token, paymentID: paymentID };


    function returnDateConverter(res: Request[]): Request[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_Request, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'mmGetPaymentRequests',
      params: { token: token, paymentID: paymentID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmGetServiceItems(token: string, handlers?: ApiTSHandlersCallbacks<ServiceItem[]>): Promise<ServiceItem[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token };


    function returnDateConverter(res: ServiceItem[]): ServiceItem[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_ServiceItem, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'mmGetServiceItems',
      params: { token: token },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmNewPayment(token: string, serviceID: number, handlers?: ApiTSHandlersCallbacks<PaymentNew>): Promise<PaymentNew> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token, serviceID: serviceID };


    function returnDateConverter(res: PaymentNew): PaymentNew {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_PaymentNew(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'mmNewPayment',
      params: { token: token, serviceID: serviceID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmGetUserInfo(token: string, handlers?: ApiTSHandlersCallbacks<UserInfo>): Promise<UserInfo> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token };


    function returnDateConverter(res: UserInfo): UserInfo {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_UserInfo(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'mmGetUserInfo',
      params: { token: token },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmCheckToken(token: string, uid: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token, uid: uid };




    return remote_call_promise_wrap({
      method: 'mmCheckToken',
      params: { token: token, uid: uid },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmGetPaymentsTotal(token: string, handlers?: ApiTSHandlersCallbacks<PaymentsTotal>): Promise<PaymentsTotal> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token };


    function returnDateConverter(res: PaymentsTotal): PaymentsTotal {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_PaymentsTotal(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'mmGetPaymentsTotal',
      params: { token: token },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmGetPayments(token: string, onlyactive: number, handlers?: ApiTSHandlersCallbacks<Payment[]>): Promise<Payment[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token, onlyactive: onlyactive };


    function returnDateConverter(res: Payment[]): Payment[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_Payment, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'mmGetPayments',
      params: { token: token, onlyactive: onlyactive },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmGetSession(token: string, requestID: number, deviceUID: string, deviceType: number, handlers?: ApiTSHandlersCallbacks<Session>): Promise<Session> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token, requestID: requestID, deviceUID: deviceUID, deviceType: deviceType };


    function returnDateConverter(res: Session): Session {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_Session(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'mmGetSession',
      params: { token: token, requestID: requestID, deviceUID: deviceUID, deviceType: deviceType },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function mmCloseSessions(token: string, requestID: number, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token, requestID: requestID };




    return remote_call_promise_wrap({
      method: 'mmCloseSessions',
      params: { token: token, requestID: requestID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function mmGetOfferFile(token: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { token: token };




    return remote_call_promise_wrap({
      method: 'mmGetOfferFile',
      params: { token: token },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function boomCodeActivateRequest(code: string, emai: string, handlers?: ApiTSHandlersCallbacks<ResultMsg>): Promise<ResultMsg> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { code: code, emai: emai };


    function returnDateConverter(res: ResultMsg): ResultMsg {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_ResultMsg(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'boomCodeActivateRequest',
      params: { code: code, emai: emai },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Notifications_Get(lastID: number, handlers?: ApiTSHandlersCallbacks<web_Notifications_Get_Result[]>): Promise<web_Notifications_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { lastID: lastID };


    function returnDateConverter(res: web_Notifications_Get_Result[]): web_Notifications_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Notifications_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Notifications_Get',
      params: { lastID: lastID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Notifications_MarkAsRead(typeID: number, targetID: number, messageIDMarkReadUpTo: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { typeID: typeID, targetID: targetID, messageIDMarkReadUpTo: messageIDMarkReadUpTo };




    return remote_call_promise_wrap({
      method: 'Notifications_MarkAsRead',
      params: { typeID: typeID, targetID: targetID, messageIDMarkReadUpTo: messageIDMarkReadUpTo },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Notifications_MarkAsDone(typeID: number, targetID: number, notificationID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { typeID: typeID, targetID: targetID, notificationID: notificationID };




    return remote_call_promise_wrap({
      method: 'Notifications_MarkAsDone',
      params: { typeID: typeID, targetID: targetID, notificationID: notificationID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Superbase_UploadSTPhotoAdd_Simple(serviceTaskID: number, userName: string, fileName: string, photoBytes: number[], handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { serviceTaskID: serviceTaskID, userName: userName, fileName: fileName, photoBytes: photoBytes };
    photoBytes = clone(photoBytes);
    const convertDirection = ConvertDirection.To;
    photoBytes = convertArray(photoBytes, convertSimple, ConverterType.None, convertDirection, false);



    return remote_call_promise_wrap({
      method: 'Superbase_UploadSTPhotoAdd_Simple',
      params: { serviceTaskID: serviceTaskID, userName: userName, fileName: fileName, photoBytes: photoBytes },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Superbase_UploadSTPhotoAdd(fileStream: Blob, headers: TFileStreamHeaders, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { _File: fileStream, _StreamHeaders: headers };

    debugger
    headers.size = fileStream.size;
    headers.filename = headers.filename ? headers.filename : (<File>fileStream).name;


    return remote_call_promise_wrap({
      method: 'Superbase_UploadSTPhotoAdd',
      params: { _File: fileStream, _StreamHeaders: headers },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Analytics_VisitsByReturnGet(firmID: number, dateValue: Date, handlers?: ApiTSHandlersCallbacks<number[]>): Promise<number[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, dateValue: dateValue };
    dateValue = clone(dateValue);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: number[]): number[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertSimple, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Analytics_VisitsByReturnGet',
      params: { firmID: firmID, dateValue: dateValue },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Analytics_DeviceInfo(firmID: number, handlers?: ApiTSHandlersCallbacks<void>): Promise<void> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_Analytics_DeviceInfo',
      params: { firmID: firmID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_FirmCheckingGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_FirmCheckingGet_Result[]>): Promise<web_Face_FirmCheckingGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_FirmCheckingGet_Result[]): web_Face_FirmCheckingGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_FirmCheckingGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_FirmCheckingGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_FirmCheckingAdd(faceFirmID: number, dateChecking: Date, lossValue: string, comment: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateChecking: dateChecking, lossValue: lossValue, comment: comment };
    dateChecking = clone(dateChecking);
    const convertDirection = ConvertDirection.To;
    dateChecking = convertSimple(dateChecking, convertDirection, ConverterType.DateTime);



    return remote_call_promise_wrap({
      method: 'FaceDetect_FirmCheckingAdd',
      params: { faceFirmID: faceFirmID, dateChecking: dateChecking, lossValue: lossValue, comment: comment },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_FirmCheckingDel(faceFirmID: number, firmCheckingID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, firmCheckingID: firmCheckingID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_FirmCheckingDel',
      params: { faceFirmID: faceFirmID, firmCheckingID: firmCheckingID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_IncidentsGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_IncidentsGet2_Result[]>): Promise<web_Face_IncidentsGet2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_IncidentsGet2_Result[]): web_Face_IncidentsGet2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_IncidentsGet2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_IncidentsGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_IncidentByIDGet(incidentID: number, handlers?: ApiTSHandlersCallbacks<web_Face_IncidentsGet2_Result[]>): Promise<web_Face_IncidentsGet2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { incidentID: incidentID };


    function returnDateConverter(res: web_Face_IncidentsGet2_Result[]): web_Face_IncidentsGet2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_IncidentsGet2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_IncidentByIDGet',
      params: { incidentID: incidentID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_IncidentAdd(faceFirmID: number, lossAmount: number, comment: string, incidentTypeID: number, dateIncident: Date, dateIncidentFinish: Date, visitorIDs: number[], prevented: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, lossAmount: lossAmount, comment: comment, incidentTypeID: incidentTypeID, dateIncident: dateIncident, dateIncidentFinish: dateIncidentFinish, visitorIDs: visitorIDs, prevented: prevented };
    dateIncident = clone(dateIncident);
    dateIncidentFinish = clone(dateIncidentFinish);
    visitorIDs = clone(visitorIDs);
    const convertDirection = ConvertDirection.To;
    dateIncident = convertSimple(dateIncident, convertDirection, ConverterType.DateTime);

    dateIncidentFinish = convertSimple(dateIncidentFinish, convertDirection, ConverterType.DateTime);

    visitorIDs = convertArray(visitorIDs, convertSimple, ConverterType.None, convertDirection, false);



    return remote_call_promise_wrap({
      method: 'FaceDetect_IncidentAdd',
      params: { faceFirmID: faceFirmID, lossAmount: lossAmount, comment: comment, incidentTypeID: incidentTypeID, dateIncident: dateIncident, dateIncidentFinish: dateIncidentFinish, visitorIDs: visitorIDs, prevented: prevented },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_IncidentKill(faceFirmID: number, incidentID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, incidentID: incidentID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_IncidentKill',
      params: { faceFirmID: faceFirmID, incidentID: incidentID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_IncidentOptionsGet(faceFirmID: number, handlers?: ApiTSHandlersCallbacks<IncidentOptionsDTO>): Promise<IncidentOptionsDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID };


    function returnDateConverter(res: IncidentOptionsDTO): IncidentOptionsDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_IncidentOptionsDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_IncidentOptionsGet',
      params: { faceFirmID: faceFirmID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_IncidentOptionsSet(faceFirmID: number, o: IncidentOptionsDTO, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, o: o };

    const convertDirection = ConvertDirection.To;
    o = convertDatesComplex_IncidentOptionsDTO(o, convertDirection);



    return remote_call_promise_wrap({
      method: 'FaceDetect_IncidentOptionsSet',
      params: { faceFirmID: faceFirmID, o: o },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_IncidentOptionsPriceHistoryGet(handlers?: ApiTSHandlersCallbacks<web_Face_IncidentOptionsPriceHistoryGet_Result[]>): Promise<web_Face_IncidentOptionsPriceHistoryGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: web_Face_IncidentOptionsPriceHistoryGet_Result[]): web_Face_IncidentOptionsPriceHistoryGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_IncidentOptionsPriceHistoryGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_IncidentOptionsPriceHistoryGet',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_IncidentOptionsHistoryGet(handlers?: ApiTSHandlersCallbacks<web_Face_IncidentOptionsHistoryGet_Result[]>): Promise<web_Face_IncidentOptionsHistoryGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: web_Face_IncidentOptionsHistoryGet_Result[]): web_Face_IncidentOptionsHistoryGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_IncidentOptionsHistoryGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_IncidentOptionsHistoryGet',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_IncidentVisitorsGet(faceFirmID: number, incidentID: number, handlers?: ApiTSHandlersCallbacks<web_Face_IncidentVisitorsGet2_Result[]>): Promise<web_Face_IncidentVisitorsGet2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, incidentID: incidentID };


    function returnDateConverter(res: web_Face_IncidentVisitorsGet2_Result[]): web_Face_IncidentVisitorsGet2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_IncidentVisitorsGet2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_IncidentVisitorsGet',
      params: { faceFirmID: faceFirmID, incidentID: incidentID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_PersonsTimeBoardGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<PersonsTimeBoardGet_Result[]>): Promise<PersonsTimeBoardGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: PersonsTimeBoardGet_Result[]): PersonsTimeBoardGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_PersonsTimeBoardGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_PersonsTimeBoardGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_PersonDocumentsGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<PersonDocumentsGet_Result[]>): Promise<PersonDocumentsGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: PersonDocumentsGet_Result[]): PersonDocumentsGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_PersonDocumentsGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_PersonDocumentsGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_PersonDocumentsStateIDSet(documentID: number, statusID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { documentID: documentID, statusID: statusID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_PersonDocumentsStateIDSet',
      params: { documentID: documentID, statusID: statusID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_PersonDocumentsFileAttachGet(faceFirmID: number, documentAttachID: number, handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, documentAttachID: documentAttachID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_PersonDocumentsFileAttachGet',
      params: { faceFirmID: faceFirmID, documentAttachID: documentAttachID },
      paramsOriginal: paramsOriginal,
      isReturnStream: true,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Report_Model_SS(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_Model_SS_Report2_Result[]>): Promise<web_Face_Model_SS_Report2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_Model_SS_Report2_Result[]): web_Face_Model_SS_Report2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_Model_SS_Report2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Report_Model_SS',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Model_SS_DetailReport(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_SS_DetailReport_Result[]>): Promise<web_Face_SS_DetailReport_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_SS_DetailReport_Result[]): web_Face_SS_DetailReport_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_SS_DetailReport_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Model_SS_DetailReport',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Report_SS_Main(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_SS_MainReport_Result[]>): Promise<web_Face_SS_MainReport_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_SS_MainReport_Result[]): web_Face_SS_MainReport_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_SS_MainReport_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Report_SS_Main',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Report_ActionResultByDay(faceFirmID: number, dateValue: Date, handlers?: ApiTSHandlersCallbacks<web_Face_Model_ActionResultReport_ByDay2_Result[]>): Promise<web_Face_Model_ActionResultReport_ByDay2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateValue: dateValue };
    dateValue = clone(dateValue);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_Model_ActionResultReport_ByDay2_Result[]): web_Face_Model_ActionResultReport_ByDay2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_Model_ActionResultReport_ByDay2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Report_ActionResultByDay',
      params: { faceFirmID: faceFirmID, dateValue: dateValue },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Report_HoldingDB(handlers?: ApiTSHandlersCallbacks<web_Face_Model_HoldingDB_Report_Result[]>): Promise<web_Face_Model_HoldingDB_Report_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: web_Face_Model_HoldingDB_Report_Result[]): web_Face_Model_HoldingDB_Report_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_Model_HoldingDB_Report_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Report_HoldingDB',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Model_ActionReport(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_Model_ActionReport2_Result[]>): Promise<web_Face_Model_ActionReport2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_Model_ActionReport2_Result[]): web_Face_Model_ActionReport2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_Model_ActionReport2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Model_ActionReport',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Model_ActionResultReport(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_Model_ActionResultReport2_Result[]>): Promise<web_Face_Model_ActionResultReport2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_Model_ActionResultReport2_Result[]): web_Face_Model_ActionResultReport2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_Model_ActionResultReport2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Model_ActionResultReport',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_MarketingTrafficGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_MarketingTrafficGet_Result[]>): Promise<web_Face_MarketingTrafficGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_MarketingTrafficGet_Result[]): web_Face_MarketingTrafficGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingTrafficGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_MarketingTrafficGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_MarketingTrafficByCamerasGet(faceFirmID: number, dateStart: Date, dateFinish: Date, cameraIDs: number[], handlers?: ApiTSHandlersCallbacks<web_Face_MarketingTrafficByCamerasGet_Result[]>): Promise<web_Face_MarketingTrafficByCamerasGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, cameraIDs: cameraIDs };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    cameraIDs = clone(cameraIDs);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    cameraIDs = convertArray(cameraIDs, convertSimple, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: web_Face_MarketingTrafficByCamerasGet_Result[]): web_Face_MarketingTrafficByCamerasGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingTrafficByCamerasGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_MarketingTrafficByCamerasGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, cameraIDs: cameraIDs },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_ConversionTrafficGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_ConversionTrafficGet_Result[]>): Promise<web_Face_ConversionTrafficGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_ConversionTrafficGet_Result[]): web_Face_ConversionTrafficGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_ConversionTrafficGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_ConversionTrafficGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_ConversionByCameraByHoursGet(faceFirmID: number, dateStart: Date, dateFinish: Date, reportVariantID: number, handlers?: ApiTSHandlersCallbacks<web_Face_ConversionByCameraByHoursGet_Result[]>): Promise<web_Face_ConversionByCameraByHoursGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, reportVariantID: reportVariantID };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_ConversionByCameraByHoursGet_Result[]): web_Face_ConversionByCameraByHoursGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_ConversionByCameraByHoursGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_ConversionByCameraByHoursGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, reportVariantID: reportVariantID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_MarketingEmotionGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_MarketingEmotionGet_Result[]>): Promise<web_Face_MarketingEmotionGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_MarketingEmotionGet_Result[]): web_Face_MarketingEmotionGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingEmotionGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_MarketingEmotionGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_MarketingEmotionByCamerasGet(faceFirmID: number, dateStart: Date, dateFinish: Date, cameraIDs: number[], handlers?: ApiTSHandlersCallbacks<web_Face_MarketingEmotionbyCamerasGet_Result[]>): Promise<web_Face_MarketingEmotionbyCamerasGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, cameraIDs: cameraIDs };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    cameraIDs = clone(cameraIDs);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    cameraIDs = convertArray(cameraIDs, convertSimple, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: web_Face_MarketingEmotionbyCamerasGet_Result[]): web_Face_MarketingEmotionbyCamerasGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingEmotionbyCamerasGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_MarketingEmotionByCamerasGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, cameraIDs: cameraIDs },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_MarketingAverageTimeInOutGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_MarketingAverageTimeInOutGet_Result[]>): Promise<web_Face_MarketingAverageTimeInOutGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_MarketingAverageTimeInOutGet_Result[]): web_Face_MarketingAverageTimeInOutGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingAverageTimeInOutGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_MarketingAverageTimeInOutGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_MarketingAverageTimeKassaGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_MarketingAverageTimeKassaGet_Result[]>): Promise<web_Face_MarketingAverageTimeKassaGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_MarketingAverageTimeKassaGet_Result[]): web_Face_MarketingAverageTimeKassaGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingAverageTimeKassaGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_MarketingAverageTimeKassaGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_MarketingAverageTimeByDayOfWeekGet(faceFirmID: number, dateStart: Date, dateFinish: Date, ageTypeID: number, handlers?: ApiTSHandlersCallbacks<web_Face_MarketingAverageTimeByDayOfWeekGet_Result[]>): Promise<web_Face_MarketingAverageTimeByDayOfWeekGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, ageTypeID: ageTypeID };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_MarketingAverageTimeByDayOfWeekGet_Result[]): web_Face_MarketingAverageTimeByDayOfWeekGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingAverageTimeByDayOfWeekGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_MarketingAverageTimeByDayOfWeekGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, ageTypeID: ageTypeID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function web_Face_MarketingAverageTimeKassaByAvgGet(faceFirmID: number, dateStart: Date, dateFinish: Date, ageTypeID: number, handlers?: ApiTSHandlersCallbacks<web_Face_MarketingAverageTimeKassaByAvgGet_Result[]>): Promise<web_Face_MarketingAverageTimeKassaByAvgGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, ageTypeID: ageTypeID };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_MarketingAverageTimeKassaByAvgGet_Result[]): web_Face_MarketingAverageTimeKassaByAvgGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingAverageTimeKassaByAvgGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'web_Face_MarketingAverageTimeKassaByAvgGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, ageTypeID: ageTypeID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_MarketingAverageTimeKassaByAvgGet(faceFirmID: number, dateStart: Date, dateFinish: Date, ageTypeID: number, handlers?: ApiTSHandlersCallbacks<web_Face_MarketingAverageTimeKassaByAvgGet_Result[]>): Promise<web_Face_MarketingAverageTimeKassaByAvgGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, ageTypeID: ageTypeID };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_MarketingAverageTimeKassaByAvgGet_Result[]): web_Face_MarketingAverageTimeKassaByAvgGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingAverageTimeKassaByAvgGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_MarketingAverageTimeKassaByAvgGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, ageTypeID: ageTypeID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_MarketingRushHoursByCamerasGet(faceFirmID: number, dateStart: Date, dateFinish: Date, cameraIDs: number[], handlers?: ApiTSHandlersCallbacks<web_Face_MarketingRushHoursByCamerasGet_Result[]>): Promise<web_Face_MarketingRushHoursByCamerasGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, cameraIDs: cameraIDs };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    cameraIDs = clone(cameraIDs);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    cameraIDs = convertArray(cameraIDs, convertSimple, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: web_Face_MarketingRushHoursByCamerasGet_Result[]): web_Face_MarketingRushHoursByCamerasGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_MarketingRushHoursByCamerasGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_MarketingRushHoursByCamerasGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish, cameraIDs: cameraIDs },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Stat_SummaryGet(firmID: number, dateValue: Date, handlers?: ApiTSHandlersCallbacks<FaceVisitorSummaryDTO[]>): Promise<FaceVisitorSummaryDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, dateValue: dateValue };
    dateValue = clone(dateValue);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: FaceVisitorSummaryDTO[]): FaceVisitorSummaryDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_FaceVisitorSummaryDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_SummaryGet',
      params: { firmID: firmID, dateValue: dateValue },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Stat_SummaryGet3(firmID: number, dateValue: Date, cameraIDs: number[], handlers?: ApiTSHandlersCallbacks<FaceVisitorSummaryDTO[]>): Promise<FaceVisitorSummaryDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, dateValue: dateValue, cameraIDs: cameraIDs };
    dateValue = clone(dateValue);
    cameraIDs = clone(cameraIDs);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    cameraIDs = convertArray(cameraIDs, convertSimple, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: FaceVisitorSummaryDTO[]): FaceVisitorSummaryDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_FaceVisitorSummaryDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_SummaryGet3',
      params: { firmID: firmID, dateValue: dateValue, cameraIDs: cameraIDs },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Stat_SummaryIncidentsGet(firmID: number, dateValue: Date, handlers?: ApiTSHandlersCallbacks<number[]>): Promise<number[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, dateValue: dateValue };
    dateValue = clone(dateValue);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: number[]): number[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertSimple, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_SummaryIncidentsGet',
      params: { firmID: firmID, dateValue: dateValue },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Stat_Get(firmID: number, personTypeID: number, dateValue: Date, hour: number, offset: number, take: number, handlers?: ApiTSHandlersCallbacks<web_Face_StatVisitsGet2_Result[]>): Promise<web_Face_StatVisitsGet2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, personTypeID: personTypeID, dateValue: dateValue, hour: hour, offset: offset, take: take };
    dateValue = clone(dateValue);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_StatVisitsGet2_Result[]): web_Face_StatVisitsGet2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_StatVisitsGet2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_Get',
      params: { firmID: firmID, personTypeID: personTypeID, dateValue: dateValue, hour: hour, offset: offset, take: take },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Stat_Get3(firmID: number, personTypeID: number, dateValue: Date, hour: number, offset: number, take: number, cameraIDs: number[], handlers?: ApiTSHandlersCallbacks<web_Face_StatVisitsGet3_Result[]>): Promise<web_Face_StatVisitsGet3_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, personTypeID: personTypeID, dateValue: dateValue, hour: hour, offset: offset, take: take, cameraIDs: cameraIDs };
    dateValue = clone(dateValue);
    cameraIDs = clone(cameraIDs);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    cameraIDs = convertArray(cameraIDs, convertSimple, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: web_Face_StatVisitsGet3_Result[]): web_Face_StatVisitsGet3_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_StatVisitsGet3_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_Get3',
      params: { firmID: firmID, personTypeID: personTypeID, dateValue: dateValue, hour: hour, offset: offset, take: take, cameraIDs: cameraIDs },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_StatVisitPeriod_Get(firmID: number, personTypeID: number, personSubTypeID: number, dateStart: Date, dateFinish: Date, offset: number, take: number, handlers?: ApiTSHandlersCallbacks<web_Face_StatVisitsPeriodGet2_Result[]>): Promise<web_Face_StatVisitsPeriodGet2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, personTypeID: personTypeID, personSubTypeID: personSubTypeID, dateStart: dateStart, dateFinish: dateFinish, offset: offset, take: take };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_StatVisitsPeriodGet2_Result[]): web_Face_StatVisitsPeriodGet2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_StatVisitsPeriodGet2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_StatVisitPeriod_Get',
      params: { firmID: firmID, personTypeID: personTypeID, personSubTypeID: personSubTypeID, dateStart: dateStart, dateFinish: dateFinish, offset: offset, take: take },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Stat_WatchedGet(faceFirmID: number, dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Face_StatWatchedGet2_Result[]>): Promise<web_Face_StatWatchedGet2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_StatWatchedGet2_Result[]): web_Face_StatWatchedGet2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_StatWatchedGet2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_WatchedGet',
      params: { faceFirmID: faceFirmID, dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Stat_VisitWatchedSet(faceFirmID: number, visitorHistoryID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorHistoryID: visitorHistoryID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_VisitWatchedSet',
      params: { faceFirmID: faceFirmID, visitorHistoryID: visitorHistoryID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Stat_VisitWatchedReset(faceFirmID: number, visitorHistoryID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorHistoryID: visitorHistoryID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_VisitWatchedReset',
      params: { faceFirmID: faceFirmID, visitorHistoryID: visitorHistoryID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Stat_VisitAcceptedSet(faceFirmID: number, visitorHistoryID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorHistoryID: visitorHistoryID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_VisitAcceptedSet',
      params: { faceFirmID: faceFirmID, visitorHistoryID: visitorHistoryID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Stat_VisitAcceptedReset(faceFirmID: number, visitorHistoryID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorHistoryID: visitorHistoryID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_VisitAcceptedReset',
      params: { faceFirmID: faceFirmID, visitorHistoryID: visitorHistoryID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Stat_VistiHistoryGet(faceFirmID: number, visitorID: number, offset: number, take: number, handlers?: ApiTSHandlersCallbacks<web_Face_Stat_VistiHistoryGet_Result[]>): Promise<web_Face_Stat_VistiHistoryGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorID: visitorID, offset: offset, take: take };


    function returnDateConverter(res: web_Face_Stat_VistiHistoryGet_Result[]): web_Face_Stat_VistiHistoryGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_Stat_VistiHistoryGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Stat_VistiHistoryGet',
      params: { faceFirmID: faceFirmID, visitorID: visitorID, offset: offset, take: take },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Base_InfoGet(firmID: number, handlers?: ApiTSHandlersCallbacks<FaceBaseInfoDTO>): Promise<FaceBaseInfoDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID };


    function returnDateConverter(res: FaceBaseInfoDTO): FaceBaseInfoDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_FaceBaseInfoDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_InfoGet',
      params: { firmID: firmID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Base_SummaryGet(firmID: number, handlers?: ApiTSHandlersCallbacks<web_Face_BaseSummaryGet_Result[]>): Promise<web_Face_BaseSummaryGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID };


    function returnDateConverter(res: web_Face_BaseSummaryGet_Result[]): web_Face_BaseSummaryGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_BaseSummaryGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_SummaryGet',
      params: { firmID: firmID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Base_Get(firmID: number, personTypeID: number, personSubTypeID: number, offset: number, take: number, handlers?: ApiTSHandlersCallbacks<web_Face_BasePersonsGet2_Result[]>): Promise<web_Face_BasePersonsGet2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, personTypeID: personTypeID, personSubTypeID: personSubTypeID, offset: offset, take: take };


    function returnDateConverter(res: web_Face_BasePersonsGet2_Result[]): web_Face_BasePersonsGet2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_BasePersonsGet2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_Get',
      params: { firmID: firmID, personTypeID: personTypeID, personSubTypeID: personSubTypeID, offset: offset, take: take },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_BasePersonGroupGet(firmID: number, visitorIDMain: number, handlers?: ApiTSHandlersCallbacks<web_Face_BasePersonGroupGet_Result[]>): Promise<web_Face_BasePersonGroupGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, visitorIDMain: visitorIDMain };


    function returnDateConverter(res: web_Face_BasePersonGroupGet_Result[]): web_Face_BasePersonGroupGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_BasePersonGroupGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_BasePersonGroupGet',
      params: { firmID: firmID, visitorIDMain: visitorIDMain },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Base_PersonChange(faceFirmID: number, person: FacePersonSaveDTO, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, person: person };

    const convertDirection = ConvertDirection.To;
    person = convertDatesComplex_FacePersonSaveDTO(person, convertDirection);



    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_PersonChange',
      params: { faceFirmID: faceFirmID, person: person },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Base_PersonChangeSecurityComment(faceFirmID: number, visitorID: number, comment: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorID: visitorID, comment: comment };




    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_PersonChangeSecurityComment',
      params: { faceFirmID: faceFirmID, visitorID: visitorID, comment: comment },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Base_PersonAdd(firmID: number, person: FacePersonSaveDTO, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, person: person };

    const convertDirection = ConvertDirection.To;
    person = convertDatesComplex_FacePersonSaveDTO(person, convertDirection);



    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_PersonAdd',
      params: { firmID: firmID, person: person },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Base_PersonAddWithDate(firmID: number, person: FacePersonSaveDTO, dateCreated: Date, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, person: person, dateCreated: dateCreated };
    dateCreated = clone(dateCreated);
    const convertDirection = ConvertDirection.To;
    person = convertDatesComplex_FacePersonSaveDTO(person, convertDirection);

    dateCreated = convertSimple(dateCreated, convertDirection, ConverterType.DateTime);



    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_PersonAddWithDate',
      params: { firmID: firmID, person: person, dateCreated: dateCreated },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Base_PersonAddWithGroupID(firmID: number, person: FacePersonSaveDTO, visitorGroupID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, person: person, visitorGroupID: visitorGroupID };

    const convertDirection = ConvertDirection.To;
    person = convertDatesComplex_FacePersonSaveDTO(person, convertDirection);



    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_PersonAddWithGroupID',
      params: { firmID: firmID, person: person, visitorGroupID: visitorGroupID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Base_PersonAddFromHistoryWithGroupID(visitorGroupID: number, visitorHistoryIDs: number[], handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { visitorGroupID: visitorGroupID, visitorHistoryIDs: visitorHistoryIDs };
    visitorHistoryIDs = clone(visitorHistoryIDs);
    const convertDirection = ConvertDirection.To;
    visitorHistoryIDs = convertArray(visitorHistoryIDs, convertSimple, ConverterType.None, convertDirection, false);



    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_PersonAddFromHistoryWithGroupID',
      params: { visitorGroupID: visitorGroupID, visitorHistoryIDs: visitorHistoryIDs },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Base_PersonDel(firmID: number, visitorID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, visitorID: visitorID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_PersonDel',
      params: { firmID: firmID, visitorID: visitorID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FD_HoldingPersonTag_List(handlers?: ApiTSHandlersCallbacks<web_HoldingPersonTag_List_Result[]>): Promise<web_HoldingPersonTag_List_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: web_HoldingPersonTag_List_Result[]): web_HoldingPersonTag_List_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_HoldingPersonTag_List_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FD_HoldingPersonTag_List',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FD_HoldingPersonTag_Add(caption: string, color: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { caption: caption, color: color };




    return remote_call_promise_wrap({
      method: 'FD_HoldingPersonTag_Add',
      params: { caption: caption, color: color },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FD_HoldingPersonTag_Edit(tagID: number, caption: string, color: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { tagID: tagID, caption: caption, color: color };




    return remote_call_promise_wrap({
      method: 'FD_HoldingPersonTag_Edit',
      params: { tagID: tagID, caption: caption, color: color },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FD_HoldingPersonTag_Remove(tagID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { tagID: tagID };




    return remote_call_promise_wrap({
      method: 'FD_HoldingPersonTag_Remove',
      params: { tagID: tagID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_ShopUsersGet(faceFirmID: number, email: string, handlers?: ApiTSHandlersCallbacks<web_Face_ShopUsersGet_Result[]>): Promise<web_Face_ShopUsersGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, email: email };


    function returnDateConverter(res: web_Face_ShopUsersGet_Result[]): web_Face_ShopUsersGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_ShopUsersGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_ShopUsersGet',
      params: { faceFirmID: faceFirmID, email: email },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_ShopUsersAdd(faceFirmID: number, login: string, pass: string, email: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, login: login, pass: pass, email: email };




    return remote_call_promise_wrap({
      method: 'FaceDetect_ShopUsersAdd',
      params: { faceFirmID: faceFirmID, login: login, pass: pass, email: email },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_ShopUsersDel(faceFirmID: number, loginID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, loginID: loginID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_ShopUsersDel',
      params: { faceFirmID: faceFirmID, loginID: loginID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function HelpDesk_Users_Get(handlers?: ApiTSHandlersCallbacks<HelpDeskUserDTO[]>): Promise<HelpDeskUserDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: HelpDeskUserDTO[]): HelpDeskUserDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_HelpDeskUserDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'HelpDesk_Users_Get',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function HelpDesk_Users_Add(user: HelpDeskUserAddDTO, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { user: user };

    const convertDirection = ConvertDirection.To;
    user = convertDatesComplex_HelpDeskUserAddDTO(user, convertDirection);



    return remote_call_promise_wrap({
      method: 'HelpDesk_Users_Add',
      params: { user: user },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function HelpDesk_Users_Edit(usr: HelpDeskUserAddDTO, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { usr: usr };

    const convertDirection = ConvertDirection.To;
    usr = convertDatesComplex_HelpDeskUserAddDTO(usr, convertDirection);



    return remote_call_promise_wrap({
      method: 'HelpDesk_Users_Edit',
      params: { usr: usr },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function HelpDesk_Users_ChangeAccessLevel(userID: number, accessLevel: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { userID: userID, accessLevel: accessLevel };




    return remote_call_promise_wrap({
      method: 'HelpDesk_Users_ChangeAccessLevel',
      params: { userID: userID, accessLevel: accessLevel },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function HelpDesk_Users_ChangePass(userID: number, newPwd: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { userID: userID, newPwd: newPwd };




    return remote_call_promise_wrap({
      method: 'HelpDesk_Users_ChangePass',
      params: { userID: userID, newPwd: newPwd },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function HelpDesk_Users_Kill(userID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { userID: userID };




    return remote_call_promise_wrap({
      method: 'HelpDesk_Users_Kill',
      params: { userID: userID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function HelpDesk_Users_SetMagnum(userID: number, isEnabled: boolean, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { userID: userID, isEnabled: isEnabled };




    return remote_call_promise_wrap({
      method: 'HelpDesk_Users_SetMagnum',
      params: { userID: userID, isEnabled: isEnabled },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_Tickets_Get(TicketID: number, DateStart: Date, DateFinish: Date, handlers?: ApiTSHandlersCallbacks<TicketDTO[]>): Promise<TicketDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { TicketID: TicketID, DateStart: DateStart, DateFinish: DateFinish };
    DateStart = clone(DateStart);
    DateFinish = clone(DateFinish);
    const convertDirection = ConvertDirection.To;
    DateStart = convertSimple(DateStart, convertDirection, ConverterType.DateTime);

    DateFinish = convertSimple(DateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: TicketDTO[]): TicketDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_TicketDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_Tickets_Get',
      params: { TicketID: TicketID, DateStart: DateStart, DateFinish: DateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_Firms_Get(FirmID: number, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_Firms_Get_Result[]>): Promise<web_Helpdesk_Firms_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { FirmID: FirmID };


    function returnDateConverter(res: web_Helpdesk_Firms_Get_Result[]): web_Helpdesk_Firms_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_Firms_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_Firms_Get',
      params: { FirmID: FirmID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_Catalog_Get(FirmID: number, handlers?: ApiTSHandlersCallbacks<HelpdeskCatalogDTO>): Promise<HelpdeskCatalogDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { FirmID: FirmID };


    function returnDateConverter(res: HelpdeskCatalogDTO): HelpdeskCatalogDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_HelpdeskCatalogDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_Catalog_Get',
      params: { FirmID: FirmID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_ChatMessages_Get(TicketID: number, LastID: number, Direction: number, Take: number, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_ChatMessages_Get_Result[]>): Promise<web_Helpdesk_ChatMessages_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { TicketID: TicketID, LastID: LastID, Direction: Direction, Take: Take };


    function returnDateConverter(res: web_Helpdesk_ChatMessages_Get_Result[]): web_Helpdesk_ChatMessages_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_ChatMessages_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_ChatMessages_Get',
      params: { TicketID: TicketID, LastID: LastID, Direction: Direction, Take: Take },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_ChatMessage_Add(TicketID: number, Message: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { TicketID: TicketID, Message: Message };




    return remote_call_promise_wrap({
      method: 'Helpdesk_ChatMessage_Add',
      params: { TicketID: TicketID, Message: Message },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_MapTickets_Get(dateStart: Date, dateFinish: Date, handlers?: ApiTSHandlersCallbacks<web_Helpdesk_MapTickets_Get_Result[]>): Promise<web_Helpdesk_MapTickets_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { dateStart: dateStart, dateFinish: dateFinish };
    dateStart = clone(dateStart);
    dateFinish = clone(dateFinish);
    const convertDirection = ConvertDirection.To;
    dateStart = convertSimple(dateStart, convertDirection, ConverterType.DateTime);

    dateFinish = convertSimple(dateFinish, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Helpdesk_MapTickets_Get_Result[]): web_Helpdesk_MapTickets_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Helpdesk_MapTickets_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'Helpdesk_MapTickets_Get',
      params: { dateStart: dateStart, dateFinish: dateFinish },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function Helpdesk_Ticket_Add(FirmID: number, ThemeID: number, Message: string, AntCount: number, ContactName: string, ContactNumber: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { FirmID: FirmID, ThemeID: ThemeID, Message: Message, AntCount: AntCount, ContactName: ContactName, ContactNumber: ContactNumber };




    return remote_call_promise_wrap({
      method: 'Helpdesk_Ticket_Add',
      params: { FirmID: FirmID, ThemeID: ThemeID, Message: Message, AntCount: AntCount, ContactName: ContactName, ContactNumber: ContactNumber },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_Ticket_SetWorking(ticketID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { ticketID: ticketID };




    return remote_call_promise_wrap({
      method: 'Helpdesk_Ticket_SetWorking',
      params: { ticketID: ticketID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Helpdesk_Ticket_SetCanceled(ticketID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { ticketID: ticketID };




    return remote_call_promise_wrap({
      method: 'Helpdesk_Ticket_SetCanceled',
      params: { ticketID: ticketID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Login(Login: string, Pass: string, handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { Login: Login, Pass: Pass };




    return remote_call_promise_wrap({
      method: 'Login',
      params: { Login: Login, Pass: Pass },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function LogOff(handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};




    return remote_call_promise_wrap({
      method: 'LogOff',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function ChangePass(NewPass: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { NewPass: NewPass };




    return remote_call_promise_wrap({
      method: 'ChangePass',
      params: { NewPass: NewPass },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function Index(handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};




    return remote_call_promise_wrap({
      method: 'Index',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: true,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function StaticContent(content: string, handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { content: content };




    return remote_call_promise_wrap({
      method: 'StaticContent',
      params: { content: content },
      paramsOriginal: paramsOriginal,
      isReturnStream: true,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function StaticContent2(content2: string, handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { content2: content2 };




    return remote_call_promise_wrap({
      method: 'StaticContent2',
      params: { content2: content2 },
      paramsOriginal: paramsOriginal,
      isReturnStream: true,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function GetItems(handlers?: ApiTSHandlersCallbacks<TreeItemsDTO>): Promise<TreeItemsDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: TreeItemsDTO): TreeItemsDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_TreeItemsDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'GetItems',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function GetReport(datefrom: string, dateto: string, charttype: string, reporttype: string, grouptype: string, objects: ReportObjectDTO[], handlers?: ApiTSHandlersCallbacks<StatReportDTO>): Promise<StatReportDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { datefrom: datefrom, dateto: dateto, charttype: charttype, reporttype: reporttype, grouptype: grouptype, objects: objects };
    objects = clone(objects);
    const convertDirection = ConvertDirection.To;
    objects = convertArray(objects, convertDatesComplex_ReportObjectDTO, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: StatReportDTO): StatReportDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_StatReportDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'GetReport',
      params: { datefrom: datefrom, dateto: dateto, charttype: charttype, reporttype: reporttype, grouptype: grouptype, objects: objects },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function GetReportSum(datefrom: string, dateto: string, reporttype: string, objects: ReportObjectDTO[], handlers?: ApiTSHandlersCallbacks<StatReportDTO>): Promise<StatReportDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { datefrom: datefrom, dateto: dateto, reporttype: reporttype, objects: objects };
    objects = clone(objects);
    const convertDirection = ConvertDirection.To;
    objects = convertArray(objects, convertDatesComplex_ReportObjectDTO, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: StatReportDTO): StatReportDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_StatReportDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'GetReportSum',
      params: { datefrom: datefrom, dateto: dateto, reporttype: reporttype, objects: objects },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function GetLogMsgTypes(handlers?: ApiTSHandlersCallbacks<DictN<string>>): Promise<DictN<string>> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: KeyValuePair<number, string>[]): DictN<string> {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertSimple, ConverterType.None, convertDirection, true);
    }

    return remote_call_promise_wrap({
      method: 'GetLogMsgTypes',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function GetTrafficLog(datefrom: string, dateto: string, objects: ReportObjectDTO[], msgtypes: number[], handlers?: ApiTSHandlersCallbacks<GetTrafficLog_Result[]>): Promise<GetTrafficLog_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { datefrom: datefrom, dateto: dateto, objects: objects, msgtypes: msgtypes };
    objects = clone(objects);
    msgtypes = clone(msgtypes);
    const convertDirection = ConvertDirection.To;
    objects = convertArray(objects, convertDatesComplex_ReportObjectDTO, ConverterType.None, convertDirection, false);

    msgtypes = convertArray(msgtypes, convertSimple, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: GetTrafficLog_Result[]): GetTrafficLog_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_GetTrafficLog_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'GetTrafficLog',
      params: { datefrom: datefrom, dateto: dateto, objects: objects, msgtypes: msgtypes },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function TrafficLogGet(datefrom: string, dateto: string, objects: ReportObjectDTO[], handlers?: ApiTSHandlersCallbacks<TrafficLogGet_Result[]>): Promise<TrafficLogGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { datefrom: datefrom, dateto: dateto, objects: objects };
    objects = clone(objects);
    const convertDirection = ConvertDirection.To;
    objects = convertArray(objects, convertDatesComplex_ReportObjectDTO, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: TrafficLogGet_Result[]): TrafficLogGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_TrafficLogGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'TrafficLogGet',
      params: { datefrom: datefrom, dateto: dateto, objects: objects },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function DeviceStateGet(objects: ReportObjectDTO[], handlers?: ApiTSHandlersCallbacks<DeviceStateGet_Result[]>): Promise<DeviceStateGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { objects: objects };
    objects = clone(objects);
    const convertDirection = ConvertDirection.To;
    objects = convertArray(objects, convertDatesComplex_ReportObjectDTO, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: DeviceStateGet_Result[]): DeviceStateGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_DeviceStateGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'DeviceStateGet',
      params: { objects: objects },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function GetMap(objects: ReportObjectDTO[], handlers?: ApiTSHandlersCallbacks<StatReportDTO>): Promise<StatReportDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { objects: objects };
    objects = clone(objects);
    const convertDirection = ConvertDirection.To;
    objects = convertArray(objects, convertDatesComplex_ReportObjectDTO, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: StatReportDTO): StatReportDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_StatReportDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'GetMap',
      params: { objects: objects },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function GetShopSettings(shopid: number, handlers?: ApiTSHandlersCallbacks<ShopPropsDTO>): Promise<ShopPropsDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { shopid: shopid };


    function returnDateConverter(res: ShopPropsDTO): ShopPropsDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_ShopPropsDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'GetShopSettings',
      params: { shopid: shopid },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function SetShopSettings(props: ShopPropsDTO, shopid: number, handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { props: props, shopid: shopid };

    const convertDirection = ConvertDirection.To;
    props = convertDatesComplex_ShopPropsDTO(props, convertDirection);



    return remote_call_promise_wrap({
      method: 'SetShopSettings',
      params: { props: props, shopid: shopid },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function GetWarnings(datefrom: string, dateto: string, objects: ReportObjectDTO[], handlers?: ApiTSHandlersCallbacks<StatReportDTO>): Promise<StatReportDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { datefrom: datefrom, dateto: dateto, objects: objects };
    objects = clone(objects);
    const convertDirection = ConvertDirection.To;
    objects = convertArray(objects, convertDatesComplex_ReportObjectDTO, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: StatReportDTO): StatReportDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_StatReportDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'GetWarnings',
      params: { datefrom: datefrom, dateto: dateto, objects: objects },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function GetWidgets(handlers?: ApiTSHandlersCallbacks<WidgetDTO[]>): Promise<WidgetDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: WidgetDTO[]): WidgetDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_WidgetDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'GetWidgets',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function SetWidget(widget: WidgetDTO, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { widget: widget };

    const convertDirection = ConvertDirection.To;
    widget = convertDatesComplex_WidgetDTO(widget, convertDirection);



    return remote_call_promise_wrap({
      method: 'SetWidget',
      params: { widget: widget },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function DeleteWidget(id: number, handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { id: id };




    return remote_call_promise_wrap({
      method: 'DeleteWidget',
      params: { id: id },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function GetSupportRequests(handlers?: ApiTSHandlersCallbacks<SupportRequestDTO[]>): Promise<SupportRequestDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: SupportRequestDTO[]): SupportRequestDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_SupportRequestDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'GetSupportRequests',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function AddSupportRequest(theme: string, message: string, category: number, handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { theme: theme, message: message, category: category };




    return remote_call_promise_wrap({
      method: 'AddSupportRequest',
      params: { theme: theme, message: message, category: category },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function AddSupportMessage(requestid: number, message: string, handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { requestid: requestid, message: message };




    return remote_call_promise_wrap({
      method: 'AddSupportMessage',
      params: { requestid: requestid, message: message },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function ChangePassword(oldpas: string, newpas: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { oldpas: oldpas, newpas: newpas };




    return remote_call_promise_wrap({
      method: 'ChangePassword',
      params: { oldpas: oldpas, newpas: newpas },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function GetCharts(handlers?: ApiTSHandlersCallbacks<ChartDTO[]>): Promise<ChartDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: ChartDTO[]): ChartDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_ChartDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'GetCharts',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function SetChart(chart: ChartDTO, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { chart: chart };

    const convertDirection = ConvertDirection.To;
    chart = convertDatesComplex_ChartDTO(chart, convertDirection);



    return remote_call_promise_wrap({
      method: 'SetChart',
      params: { chart: chart },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function DeleteChart(id: number, handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { id: id };




    return remote_call_promise_wrap({
      method: 'DeleteChart',
      params: { id: id },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function RegTest(SerialNumber: string, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { SerialNumber: SerialNumber };




    return remote_call_promise_wrap({
      method: 'RegTest',
      params: { SerialNumber: SerialNumber },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function RegLastData(SerialNumber: string, handlers?: ApiTSHandlersCallbacks<LastDataDTO>): Promise<LastDataDTO> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { SerialNumber: SerialNumber };


    function returnDateConverter(res: LastDataDTO): LastDataDTO {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_LastDataDTO(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'RegLastData',
      params: { SerialNumber: SerialNumber },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function RegNewData3(data: ImportDataDTO, handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { data: data };

    const convertDirection = ConvertDirection.To;
    data = convertDatesComplex_ImportDataDTO(data, convertDirection);



    return remote_call_promise_wrap({
      method: 'RegNewData3',
      params: { data: data },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function RegNewData4(data: ImportDataDTO, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { data: data };

    const convertDirection = ConvertDirection.To;
    data = convertDatesComplex_ImportDataDTO(data, convertDirection);



    return remote_call_promise_wrap({
      method: 'RegNewData4',
      params: { data: data },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function RegNewData5(data: ImportDataDTO, handlers?: ApiTSHandlersCallbacks<string>): Promise<string> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { data: data };

    const convertDirection = ConvertDirection.To;
    data = convertDatesComplex_ImportDataDTO(data, convertDirection);



    return remote_call_promise_wrap({
      method: 'RegNewData5',
      params: { data: data },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function GetFirmHoldingFirm(idFirmHolding: number, handlers?: ApiTSHandlersCallbacks<FirmMapDTO[]>): Promise<FirmMapDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { idFirmHolding: idFirmHolding };


    function returnDateConverter(res: FirmMapDTO[]): FirmMapDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_FirmMapDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'GetFirmHoldingFirm',
      params: { idFirmHolding: idFirmHolding },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function GetFirmHoldingFirmService(startDate: string, handlers?: ApiTSHandlersCallbacks<FirmServiceMapDTO[]>): Promise<FirmServiceMapDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { startDate: startDate };


    function returnDateConverter(res: FirmServiceMapDTO[]): FirmServiceMapDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_FirmServiceMapDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'GetFirmHoldingFirmService',
      params: { startDate: startDate },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_PhotoGet(faceFirmID: number, photoID: number, isPerson: boolean, handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, photoID: photoID, isPerson: isPerson };




    return remote_call_promise_wrap({
      method: 'FaceDetect_PhotoGet',
      params: { faceFirmID: faceFirmID, photoID: photoID, isPerson: isPerson },
      paramsOriginal: paramsOriginal,
      isReturnStream: true,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Base_VisitorTagCommentGet(faceFirmID: number, visitorID: number, handlers?: ApiTSHandlersCallbacks<web_Face_BaseVisitorTagCommentGet_Result[]>): Promise<web_Face_BaseVisitorTagCommentGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorID: visitorID };


    function returnDateConverter(res: web_Face_BaseVisitorTagCommentGet_Result[]): web_Face_BaseVisitorTagCommentGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_BaseVisitorTagCommentGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_VisitorTagCommentGet',
      params: { faceFirmID: faceFirmID, visitorID: visitorID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Base_VisitorTagAdd(faceFirmID: number, visitorID: number, tagTypeID: number, comment: string, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorID: visitorID, tagTypeID: tagTypeID, comment: comment };




    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_VisitorTagAdd',
      params: { faceFirmID: faceFirmID, visitorID: visitorID, tagTypeID: tagTypeID, comment: comment },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Base_VisitorTagAddWithDate(faceFirmID: number, visitorID: number, tagTypeID: number, comment: string, dateCreated: Date, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorID: visitorID, tagTypeID: tagTypeID, comment: comment, dateCreated: dateCreated };
    dateCreated = clone(dateCreated);
    const convertDirection = ConvertDirection.To;
    dateCreated = convertSimple(dateCreated, convertDirection, ConverterType.DateTime);



    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_VisitorTagAddWithDate',
      params: { faceFirmID: faceFirmID, visitorID: visitorID, tagTypeID: tagTypeID, comment: comment, dateCreated: dateCreated },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Base_VisitorTagKill(faceFirmID: number, visitorID: number, tagID: number, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID, visitorID: visitorID, tagID: tagID };




    return remote_call_promise_wrap({
      method: 'FaceDetect_Base_VisitorTagKill',
      params: { faceFirmID: faceFirmID, visitorID: visitorID, tagID: tagID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_FirmsGet(faceFirmID: number, handlers?: ApiTSHandlersCallbacks<web_FaceDetect_Firms_Get_Result[]>): Promise<web_FaceDetect_Firms_Get_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { faceFirmID: faceFirmID };


    function returnDateConverter(res: web_FaceDetect_Firms_Get_Result[]): web_FaceDetect_Firms_Get_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_FaceDetect_Firms_Get_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_FirmsGet',
      params: { faceFirmID: faceFirmID },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_VisitorsByIDs_Get(firmID: number, visitorIDs: number[], handlers?: ApiTSHandlersCallbacks<web_Face_VisitorsByIDsGet2_Result[]>): Promise<web_Face_VisitorsByIDsGet2_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, visitorIDs: visitorIDs };
    visitorIDs = clone(visitorIDs);
    const convertDirection = ConvertDirection.To;
    visitorIDs = convertArray(visitorIDs, convertSimple, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: web_Face_VisitorsByIDsGet2_Result[]): web_Face_VisitorsByIDsGet2_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_VisitorsByIDsGet2_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_VisitorsByIDs_Get',
      params: { firmID: firmID, visitorIDs: visitorIDs },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_DemoModeSwitch(onOff: number, handlers?: ApiTSHandlersCallbacks<void>): Promise<void> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { onOff: onOff };




    return remote_call_promise_wrap({
      method: 'FaceDetect_DemoModeSwitch',
      params: { onOff: onOff },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_GetCamerasList(handlers?: ApiTSHandlersCallbacks<web_Face_GetCamerasList_Result[]>): Promise<web_Face_GetCamerasList_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = {};


    function returnDateConverter(res: web_Face_GetCamerasList_Result[]): web_Face_GetCamerasList_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_GetCamerasList_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_GetCamerasList',
      params: {},
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Test_ImageAdd(person: FacePersonSaveDTO, handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { person: person };

    const convertDirection = ConvertDirection.To;
    person = convertDatesComplex_FacePersonSaveDTO(person, convertDirection);



    return remote_call_promise_wrap({
      method: 'FaceDetect_Test_ImageAdd',
      params: { person: person },
      paramsOriginal: paramsOriginal,
      isReturnStream: true,
      handlers: handlers,
      responseConverter: null,
    });
  }
  export function FaceDetect_Analytics_VisitsByHoursGet(firmID: number, dateValue: Date, handlers?: ApiTSHandlersCallbacks<FaceVisitorSummaryVisitOnlyDTO[]>): Promise<FaceVisitorSummaryVisitOnlyDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, dateValue: dateValue };
    dateValue = clone(dateValue);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: FaceVisitorSummaryVisitOnlyDTO[]): FaceVisitorSummaryVisitOnlyDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_FaceVisitorSummaryVisitOnlyDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Analytics_VisitsByHoursGet',
      params: { firmID: firmID, dateValue: dateValue },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Analytics_VisitsByHoursGet3(firmID: number, dateValue: Date, cameraIDs: number[], handlers?: ApiTSHandlersCallbacks<FaceVisitorSummaryVisitOnlyDTO[]>): Promise<FaceVisitorSummaryVisitOnlyDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, dateValue: dateValue, cameraIDs: cameraIDs };
    dateValue = clone(dateValue);
    cameraIDs = clone(cameraIDs);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    cameraIDs = convertArray(cameraIDs, convertSimple, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: FaceVisitorSummaryVisitOnlyDTO[]): FaceVisitorSummaryVisitOnlyDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_FaceVisitorSummaryVisitOnlyDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Analytics_VisitsByHoursGet3',
      params: { firmID: firmID, dateValue: dateValue, cameraIDs: cameraIDs },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Analytics_VisitsByHoursGet4(firmID: number, dateValue: Date, cameraIDs: number[], handlers?: ApiTSHandlersCallbacks<FaceVisitorSummaryVisitOnlyDTO[]>): Promise<FaceVisitorSummaryVisitOnlyDTO[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, dateValue: dateValue, cameraIDs: cameraIDs };
    dateValue = clone(dateValue);
    cameraIDs = clone(cameraIDs);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    cameraIDs = convertArray(cameraIDs, convertSimple, ConverterType.None, convertDirection, false);

    function returnDateConverter(res: FaceVisitorSummaryVisitOnlyDTO[]): FaceVisitorSummaryVisitOnlyDTO[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_FaceVisitorSummaryVisitOnlyDTO, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Analytics_VisitsByHoursGet4',
      params: { firmID: firmID, dateValue: dateValue, cameraIDs: cameraIDs },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Analytics_VisitsByGenderGet(firmID: number, dateValue: Date, handlers?: ApiTSHandlersCallbacks<web_Face_AnalyticsVisitsByGenderGet_Result[]>): Promise<web_Face_AnalyticsVisitsByGenderGet_Result[]> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, dateValue: dateValue };
    dateValue = clone(dateValue);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: web_Face_AnalyticsVisitsByGenderGet_Result[]): web_Face_AnalyticsVisitsByGenderGet_Result[] {
      const convertDirection = ConvertDirection.From;
      return convertArray(res, convertDatesComplex_web_Face_AnalyticsVisitsByGenderGet_Result, ConverterType.None, convertDirection, false);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Analytics_VisitsByGenderGet',
      params: { firmID: firmID, dateValue: dateValue },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }
  export function FaceDetect_Analytics_VisitsByReturnGet2(firmID: number, dateValue: Date, handlers?: ApiTSHandlersCallbacks<FaceVisitChart>): Promise<FaceVisitChart> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { firmID: firmID, dateValue: dateValue };
    dateValue = clone(dateValue);
    const convertDirection = ConvertDirection.To;
    dateValue = convertSimple(dateValue, convertDirection, ConverterType.DateTime);

    function returnDateConverter(res: FaceVisitChart): FaceVisitChart {
      const convertDirection = ConvertDirection.From;
      return convertDatesComplex_FaceVisitChart(res, convertDirection);
    }

    return remote_call_promise_wrap({
      method: 'FaceDetect_Analytics_VisitsByReturnGet2',
      params: { firmID: firmID, dateValue: dateValue },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: returnDateConverter,
    });
  }

  export namespace Enums {
    export enum FacePersonType {
      VIP = 1, //"Випы"
      Thief = 2, //"Воры"
      Staff = 3, //"Персонал"
      Marked = 4, //"Отмеченные"
      New = 1000, //"Новые"
      Returned = 1001, //"Возвращенные"
    }

    export enum FacePersonSybType {
      Blacklisted = 1, //"Чернолищенный"
      Disturber = 2, //"Нарушитель"
      Suspicious = 3, //"Подозрительный"
      Suspect = 4, //"Подозреваемый"
    }

    export enum PersonDocumentStatusType {
      Unprocessed = 0, //"Необработан"
      Confirmed = 1, //"Утвержден"
      Declined = 2, //"Отклонен"
    }

    export enum TicketStatus {
      New = 0, //""
      Working = 1, //""
      Completed = 2, //""
      Done = 3, //""
      Canceled = 4, //""
    }

    export enum ItemType {
      Region = 10, //""
      City = 20, //""
      Shop = 30, //""
      Device = 40, //""
    }

    export enum ChartType {
      None = 0, //""
      Bar = 1, //""
      Line = 2, //""
      Pie = 3, //""
    }

    export enum ReportType {
      None = 0, //""
      AlarmsItems = 1, //""
      AlarmsTime = 2, //""
      Jamming = 3, //""
      ChangeSettings = 4, //""
      TimeOut = 5, //""
      DeviceState = 6, //""
      Warnings = 7, //""
      Magnet = 8, //""
      Metal = 9, //""
      Alarms = 10, //""
      IncidentsAndSettings = 11, //""
    }

    export enum GroupPeriod {
      None = 0, //""
      Year = 1, //""
      Month = 2, //""
      Week = 3, //""
      Day = 4, //""
      Hour = 5, //""
      Min30 = 6, //""
      Min20 = 7, //""
      Min15 = 8, //""
      Min10 = 9, //""
      Min5 = 10, //""
      Min1 = 11, //""
    }

    export enum DateType {
      Today = 1, //""
      Ytoday = 2, //""
      Week = 7, //""
      Month = 30, //""
      Quarter = 120, //""
      Year = 365, //""
    }

    export enum FaceEmotionType {
      Unknown = 0, //"Неизвестно"
      NotDetected = 1, //"Не распознано"
      Smile = 2, //"Улыбка"
      Anger = 3, //"Злость"
      Sadness = 4, //"Грусть"
      Disgust = 5, //"Отвращение"
      Fear = 6, //"Страх"
      Surprise = 7, //"Удивление"
      Neutral = 8, //"Безразличие"
      Laugh = 9, //"Смех"
      Happiness = 10, //"Радость"
      Confusion = 11, //"Замешательство"
      Scream = 12, //"Крик"
    }

    export enum Role {
      Admin = 1, //""
      User = 2, //""
      MagnetBasic = 3, //""
      ShopID = 4, //""
      HelpDeskAdmin = 5, //""
      HelpDeskRegionManager = 6, //""
      HelpDeskShopManager = 7, //""
      FaceDetect = 8, //""
      FaceFirmID = 9, //""
      AdminExtraAccess = 10, //""
      MarketingAccess = 11, //""
      StaffAccess = 12, //""
      SecurityAccess = 13, //""
      MagnumMobile = 14, //""
    }

  };

  export const EnumDict = {
    FacePersonType: {
      1: "Випы",
      2: "Воры",
      3: "Персонал",
      4: "Отмеченные",
      1000: "Новые",
      1001: "Возвращенные",
    },

    FacePersonSybType: {
      1: "Чернолищенный",
      2: "Нарушитель",
      3: "Подозрительный",
      4: "Подозреваемый",
    },

    PersonDocumentStatusType: {
      0: "Необработан",
      1: "Утвержден",
      2: "Отклонен",
    },

    TicketStatus: {
      0: "",
      1: "",
      2: "",
      3: "",
      4: "",
    },

    ItemType: {
      10: "",
      20: "",
      30: "",
      40: "",
    },

    ChartType: {
      0: "",
      1: "",
      2: "",
      3: "",
    },

    ReportType: {
      0: "",
      1: "",
      2: "",
      3: "",
      4: "",
      5: "",
      6: "",
      7: "",
      8: "",
      9: "",
      10: "",
      11: "",
    },

    GroupPeriod: {
      0: "",
      1: "",
      2: "",
      3: "",
      4: "",
      5: "",
      6: "",
      7: "",
      8: "",
      9: "",
      10: "",
      11: "",
    },

    DateType: {
      1: "",
      2: "",
      7: "",
      30: "",
      120: "",
      365: "",
    },

    FaceEmotionType: {
      0: "Неизвестно",
      1: "Не распознано",
      2: "Улыбка",
      3: "Злость",
      4: "Грусть",
      5: "Отвращение",
      6: "Страх",
      7: "Удивление",
      8: "Безразличие",
      9: "Смех",
      10: "Радость",
      11: "Замешательство",
      12: "Крик",
    },

    Role: {
      1: "",
      2: "",
      3: "",
      4: "",
      5: "",
      6: "",
      7: "",
      8: "",
      9: "",
      10: "",
      11: "",
      12: "",
      13: "",
      14: "",
    },

  };

  export const EnumLists = {
    FacePersonTypes: [
      { ID: 1, Name: "Випы" },
      { ID: 2, Name: "Воры" },
      { ID: 3, Name: "Персонал" },
      { ID: 4, Name: "Отмеченные" },
      { ID: 1000, Name: "Новые" },
      { ID: 1001, Name: "Возвращенные" },
    ],

    FacePersonSybTypes: [
      { ID: 1, Name: "Чернолищенный" },
      { ID: 2, Name: "Нарушитель" },
      { ID: 3, Name: "Подозрительный" },
      { ID: 4, Name: "Подозреваемый" },
    ],

    PersonDocumentStatusTypes: [
      { ID: 0, Name: "Необработан" },
      { ID: 1, Name: "Утвержден" },
      { ID: 2, Name: "Отклонен" },
    ],

    TicketStatuses: [
      { ID: 0, Name: "" },
      { ID: 1, Name: "" },
      { ID: 2, Name: "" },
      { ID: 3, Name: "" },
      { ID: 4, Name: "" },
    ],

    ItemTypes: [
      { ID: 10, Name: "" },
      { ID: 20, Name: "" },
      { ID: 30, Name: "" },
      { ID: 40, Name: "" },
    ],

    ChartTypes: [
      { ID: 0, Name: "" },
      { ID: 1, Name: "" },
      { ID: 2, Name: "" },
      { ID: 3, Name: "" },
    ],

    ReportTypes: [
      { ID: 0, Name: "" },
      { ID: 1, Name: "" },
      { ID: 2, Name: "" },
      { ID: 3, Name: "" },
      { ID: 4, Name: "" },
      { ID: 5, Name: "" },
      { ID: 6, Name: "" },
      { ID: 7, Name: "" },
      { ID: 8, Name: "" },
      { ID: 9, Name: "" },
      { ID: 10, Name: "" },
      { ID: 11, Name: "" },
    ],

    GroupPeriods: [
      { ID: 0, Name: "" },
      { ID: 1, Name: "" },
      { ID: 2, Name: "" },
      { ID: 3, Name: "" },
      { ID: 4, Name: "" },
      { ID: 5, Name: "" },
      { ID: 6, Name: "" },
      { ID: 7, Name: "" },
      { ID: 8, Name: "" },
      { ID: 9, Name: "" },
      { ID: 10, Name: "" },
      { ID: 11, Name: "" },
    ],

    DateTypes: [
      { ID: 1, Name: "" },
      { ID: 2, Name: "" },
      { ID: 7, Name: "" },
      { ID: 30, Name: "" },
      { ID: 120, Name: "" },
      { ID: 365, Name: "" },
    ],

    FaceEmotionTypes: [
      { ID: 0, Name: "Неизвестно" },
      { ID: 1, Name: "Не распознано" },
      { ID: 2, Name: "Улыбка" },
      { ID: 3, Name: "Злость" },
      { ID: 4, Name: "Грусть" },
      { ID: 5, Name: "Отвращение" },
      { ID: 6, Name: "Страх" },
      { ID: 7, Name: "Удивление" },
      { ID: 8, Name: "Безразличие" },
      { ID: 9, Name: "Смех" },
      { ID: 10, Name: "Радость" },
      { ID: 11, Name: "Замешательство" },
      { ID: 12, Name: "Крик" },
    ],

    Roles: [
      { ID: 1, Name: "" },
      { ID: 2, Name: "" },
      { ID: 3, Name: "" },
      { ID: 4, Name: "" },
      { ID: 5, Name: "" },
      { ID: 6, Name: "" },
      { ID: 7, Name: "" },
      { ID: 8, Name: "" },
      { ID: 9, Name: "" },
      { ID: 10, Name: "" },
      { ID: 11, Name: "" },
      { ID: 12, Name: "" },
      { ID: 13, Name: "" },
      { ID: 14, Name: "" },
    ],

  };

  export const Static = {
  };

}
export default WebApi; 
