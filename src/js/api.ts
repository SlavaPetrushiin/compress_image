
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApi {
  export const Version = '1.3.2.228';
  export interface ApiTSHandlersCallbacks<T> {
    Then?: (res: T) => void;
    Catch?: (error?: string) => void;
    Finally?: (res?: T) => void;
    BeforeCall?: (request?: XMLHttpRequest) => void;
  }
  export interface KeyValuePair<K, V> {
    Key: K;
    Value: V;
  }
  export type Dict<TValue> = {
    [key: string]: TValue;
  }
  export type DictN<TValue> = {
    [key: number]: TValue;
  }
  export type TFileStreamHeaders = {
    filename?: string;
    size?: number;
  } & Dict<any>;
  export type Guid = string;
  export let timeout: number = 0;
  export let debug: boolean = false;
  export let isServiceLocalTimeZone = false;
  export let serviceTimeZoneOffset = 0; //utc;
  export function getTzOffset(date: Date = new Date()): number {
    return date.getTimezoneOffset() * -1;
  }

  export let serviceName: string = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + '/api.svc';
  export const Guid = {
    Empty: '00000000-0000-0000-0000-000000000000',
    Generate(): string {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
      });
    },
  };
  export const Console: { ColorSend: string, ColorResult: string, ColorBG: string } = {
    ColorSend: '#11793E',
    ColorResult: '#000',
    ColorBG: 'antiquewhite'
  };
  export let debugExcludes: Dict<boolean> = {};
  //export debugExcludesEmptyOnly: any false;
  export let ontimeout = function (method: string, e?: ProgressEvent): void {

  };
  export let onerror = function (ev: ProgressEvent | null, method: string, params: object, xhr: XMLHttpRequest): void {

  };
  export let onUnauth = function (method?: string): void {
    console.log('Unauthorized ' + method);
    if ((<any>window)['Luff'] && (<any>window)['Luff'].User)
      localStorage.setItem('LuffRoute' + document.location.href.split('#')[0], document.location.hash);
    window.location.href = 'index.html'
  };
  export let onDeny = function (method: string, params: object): void {
    console.error('[Server] Method Access denied ' + method, params);
    if ((<any>window)['Luff'])
      (<any>window)['Luff'].Pop.Error('[Access denied] Method: `' + method + '` is not allowed');
  };
  let base64: any = (function () { function b(m: any, n: any, o: any, p: any, q: any, r: any) { m += ''; for (var y, t = 0, u = 0, v = m.length, w = '', x = 0; u < v;) { for (y = m.charCodeAt(u), y = 256 > y ? o[y] : -1, t = (t << q) + y, x += q; x >= r;) { x -= r; var z = t >> x; w += p.charAt(z), t ^= z << x } ++u } return !n && 0 < x && (w += p.charAt(t << r - x)), w } for (var k, d = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', e = '', f = [256], g = [256], h = 0, j = { encode: function encode(m: any) { var n = m.replace(/[\u0080-\u07ff]/g, function (o: any) { var p = o.charCodeAt(0); return String.fromCharCode(192 | p >> 6, 128 | 63 & p) }).replace(/[\u0800-\uffff]/g, function (o: any) { var p = o.charCodeAt(0); return String.fromCharCode(224 | p >> 12, 128 | 63 & p >> 6, 128 | 63 & p) }); return n }, decode: function decode(m: any) { var n = m.replace(/[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g, function (o: any) { var p = (15 & o.charCodeAt(0)) << 12 | (63 & o.charCodeAt(1)) << 6 | 63 & o.charCodeAt(2); return String.fromCharCode(p) }).replace(/[\u00c0-\u00df][\u0080-\u00bf]/g, function (o: any) { var p = (31 & o.charCodeAt(0)) << 6 | 63 & o.charCodeAt(1); return String.fromCharCode(p) }); return n } }; 256 > h;)k = String.fromCharCode(h), e += k, g[h] = h, f[h] = d.indexOf(k), ++h; let l: any = function (m: any, n: any, o: any) { return n ? l[m](n, o) : m ? null : this }; return l.btoa = l.encode = function (m: any, n: any) { return m = !1 === l.raw || l.utf8encode || n ? j.encode(m) : m, m = b(m, !1, g, d, 8, 6), m + '===='.slice(m.length % 4 || 4) }, l.atob = l.decode = function (m: any, n: any) { m = (m + '').split('='); var o = m.length; do --o, m[o] = b(m[o], !0, f, e, 6, 8); while (0 < o); return m = m.join(''), !1 === l.raw || l.utf8decode || n ? j.decode(m) : m }, l })();
  function make_base_auth(user: string, password: string): string {
    let tok = user + ':' + password;
    let hash = base64.encode(tok);
    return 'Basic ' + hash;
  }

  function _isObjectEmpty(obj: any, isStrict: boolean = false) {
    if (isStrict && typeof obj !== 'object')
      return false;
    return !(obj && Object.keys(obj).length > 0);
  }
  type TCallProps<T> = {
    method: string;
    params: object;
    paramsOriginal: object;
    isReturnStream: boolean;
    handlers: ApiTSHandlersCallbacks<T>;
    responseConverter: (v: any) => void;
  }
  function call<T>(promise: Promise<T>, handlers: ApiTSHandlersCallbacks<T> = {}): Promise<T> {
    return promise.then(function (x) {
      // eslint-disable-next-line no-unused-expressions
      handlers.Then ? handlers.Then(x) : null;
      // eslint-disable-next-line no-unused-expressions
      handlers.Finally ? handlers.Finally(x) : null;
      return promise;
    })
      .catch(function (x) {
        handlers.Catch ? handlers.Catch(x) : console.error('[api.call]', x);
        // eslint-disable-next-line no-unused-expressions
        handlers.Finally ? handlers.Finally(x) : null;
        return promise;
      });
    //return promise;
  }
  export function remote_call_promise_wrap<T>(props: TCallProps<T>): Promise<T> {
    return call(
      remote_call_promise(
        props.method,
        props.params,
        props.isReturnStream,
        props.handlers ? props.handlers.BeforeCall : void 0,
        props.responseConverter,
        props.paramsOriginal),
      props.handlers);
  }
  export function remote_call_promise(method: string, params: any, isReturnStream: boolean, beforeCall?: (xreq: XMLHttpRequest) => void, paramsParseDateFromCs?: (v: any) => void, paramsOriginal?: any): Promise<any> {
    return new Promise((resolve, reject) => {
      let isSendStream = false;
      let xhr = new XMLHttpRequest();
      xhr.responseType = isReturnStream ? 'blob' : '';
      xhr.timeout = timeout;
      if (debug && (Object.getOwnPropertyNames(debugExcludes).indexOf(method) < 0)) {
        let SpaceCount = 36 - method.length;
        console.log('%c[api] ' + method + ' '.repeat(SpaceCount > 0 ? SpaceCount : 1) + '-> ', `color: ${Console.ColorSend}; background-color: ${Console.ColorBG}; padding: 3px 7px;`, paramsOriginal);
      }
      xhr.onload = () => {
        let result = xhr.response;
        if (xhr.status === 200 && xhr.responseType !== 'blob' && xhr.response) {
          result = JSON.parse(xhr.response);
          if (paramsParseDateFromCs)
            result = paramsParseDateFromCs(result);
        }
        // if (debug && ( Object.getOwnPropertyNames(debugExcludes).indexOf(method) < 0 || (debugExcludes[method] && !_isObjectEmpty(result, true)) )){
        //     let SpaceCount = 36-method.length;
        //     console.log('%c[api] '+method+' '.repeat(SpaceCount>0? SpaceCount: 1)+'-> ', `color: ${Console.ColorSend}; background-color: ${Console.ColorBG}; padding: 3px 7px;`, paramsOriginal);
        // }
        if ((debug || (typeof (<any>window)['DEBUG'] !== 'undefined' && (<any>window)['DEBUG'])) && (Object.getOwnPropertyNames(debugExcludes).indexOf(method) < 0 || (debugExcludes[method] && !_isObjectEmpty(result, true)))) {
          let SpaceCount = 36 - method.length;
          console.log('%c[api] ' + method + ' '.repeat(SpaceCount > 0 ? SpaceCount : 1) + '<- ', `color: ${Console.ColorResult}; background-color: ${Console.ColorBG}; padding: 3px 7px;`, result);
        }

        if (xhr.status === 200) {
          resolve(result);
        }
        else if (xhr.status === 403) {
          reject('[api ' + method + '] Error 403: Forbidden');
          if (onerror)
            onerror(null, method, params, xhr);
          if (onDeny)
            onDeny(method, params)
        }
        else if (xhr.status === 401) {
          document.cookie = 'ssid=unauthorized;path=/';
          reject('[api ' + method + '] Error 401: Unauthorized');
          if (onerror)
            onerror(null, method, params, xhr);
          if (onUnauth)
            onUnauth(method);
        }
        else {
          reject('[api ' + method + '] Error ' + xhr.status + ': ' + xhr.statusText);
          if (onerror)
            onerror(null, method, params, xhr);
        }
      };
      xhr.onerror = (e: ProgressEvent) => {
        reject(e);
        if (onerror)
          onerror(e, method, params, xhr);
      };
      xhr.addEventListener('timeout', (e) => {
        ontimeout(method, e);
        reject(method);
        if (onerror)
          onerror(e, method, params, xhr);
      });
      xhr.open('POST', serviceName + '/' + method);

      //if input stream:
      if (params && params._StreamHeaders !== void 0 || params._File !== void 0) {
        isSendStream = true;
        let Headers = params._StreamHeaders;
        let ContentDisposition = '';
        let keys = Object.getOwnPropertyNames(Headers);
        for (let i = 0; i < keys.length; i++) {
          let key = keys[i];
          if (typeof Headers[key] === 'string')
            Headers[key] = Headers[key].replace(/;/g, '');
          ContentDisposition += `${key}= ${btoa(encodeURIComponent(Headers[key]))}`;
          if (i < keys.length - 1) {
            ContentDisposition += ';';
          }
        }
        delete params._StreamHeaders;
        xhr.setRequestHeader('Content-Disposition', ContentDisposition);
        xhr.setRequestHeader('Content-Type', 'multipart/form-data');
      }
      if (method === 'Login')
        xhr.setRequestHeader('Authorization', make_base_auth(params.Login, params.Pass));
      if (beforeCall)
        beforeCall(xhr);
      if (!isSendStream) {
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        //xhr.setRequestHeader('Content-Type', 'text/plain; charset=utf-8'); // - for NewtonSoft.JsonSerializer
        //xhr.setRequestHeader('Accept','application/json');
        xhr.send(JSON.stringify(params));
      }
      else
        xhr.send(params._File);
    });
  }

  export function Superbase_UploadSTPhotoAdd(fileStream: Blob, headers: TFileStreamHeaders, handlers?: ApiTSHandlersCallbacks<number>): Promise<number> {
    let paramsOriginal;
    if (debug)
      paramsOriginal = { _File: fileStream, _StreamHeaders: headers };

    headers.size = fileStream.size;
    headers.filename = headers.filename ? headers.filename : (<File>fileStream).name;


    return remote_call_promise_wrap({
      method: 'Superbase_UploadSTPhotoAdd',
      params: { _File: fileStream, _StreamHeaders: headers },
      paramsOriginal: paramsOriginal,
      isReturnStream: false,
      handlers: handlers,
      responseConverter: null,
    });
  }

  export const Static = {
  };

}
export default WebApi; 
